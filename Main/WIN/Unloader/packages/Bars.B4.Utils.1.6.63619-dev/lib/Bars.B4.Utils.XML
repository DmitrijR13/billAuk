<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bars.B4.Utils</name>
    </assembly>
    <members>
        <member name="T:Bars.B4.Utils.Annotations.BaseTypeRequiredAttribute">
            <summary>When applied to a target attribute, specifies a requirement for any type marked with
            the target attribute to implement or inherit specific type or types.</summary>
            <example>
              <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute
            {}
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent
            {}
              </code>
            </example>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance of the <see cref="T:Bars.B4.Utils.Annotations.BaseTypeRequiredAttribute"/> class</summary>
            <param name="baseType">Specifies which types are required</param>
        </member>
        <member name="P:Bars.B4.Utils.Annotations.BaseTypeRequiredAttribute.BaseTypes">
            <summary>Gets enumerations of specified base types</summary>
        </member>
        <member name="F:Bars.B4.Utils.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:Bars.B4.Utils.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:Bars.B4.Utils.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.</summary>
        </member>
        <member name="F:Bars.B4.Utils.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:Bars.B4.Utils.Annotations.ArgumentChecker">
            <summary>
            Проверяет аргументы методов.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.IsType(System.Object,System.Type,System.String)">
            <summary>
            Проверяет имеет ли объект указанный тип.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="value">
            Объект (один из параметров метода, из которого вызывается).
            </param>
            <param name="type">
            Тип.
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Аргументы value и type проверяются методом NotNull.
            Если объект не имеет указанный тип,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.IsType``1(System.Object,System.String)">
            <summary>
            Проверяет имеет ли объект указанный тип.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="value">
            Объект (один из параметров метода, из которого вызывается).
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <typeparam name="TType">
            Тип.
            </typeparam>
            <remarks>
            Аргументы value и type проверяются методом NotNull.
            Если объект не имеет указанный тип,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotAbstract(System.Type,System.String)">
            <summary>
            Проверяет является ли тип неабстрактным. 
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="type">
            Тип (один из параметров метода, из которого вызывается).
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Аргумент type проверяется методом NotNull.
            Если тип является абстрактным,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.IsEnum(System.Type,System.String)">
            <summary>
            Проверяет является ли тип перечислением. 
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="type">
            Тип (один из параметров метода, из которого вызывается).
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Аргумент type проверяется методом NotNull.
            Если тип не является перечислением,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotNullAndSubclassOf(System.Type,System.Type,System.String,System.String)">
            <summary>
            Проверяет не является ли ссылка на тип пустой
            и является ли тип наследником указанного типа.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            Строка форматирования сообщения.
            <param name="typeValue">
            Тип (один из параметров метода, из которого вызывается).
            </param>
            <param name="baseType">
            Базовый тип.
            </param>
            <param name="message"></param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если объект равен null,
            то выбрасывается исключение типа ArgumentNullException (с помощью ExceptionHelper.Throw).
            Если тип не является наследником указанного типа,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotNullAndSubclassOf(System.Type,System.Type,System.String)">
            <summary>
            Проверяет не является ли ссылка на тип пустой
            и является ли тип наследником указанного типа.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="typeValue">
            Тип (один из параметров метода, из которого вызывается).
            </param>
            <param name="baseType">
            Базовый тип.
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если объект равен null,
            то выбрасывается исключение типа ArgumentNullException (с помощью ExceptionHelper.Throw).
            Если тип не является наследником указанного типа,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotNullAndSubclassOf(System.Object,System.Type,System.String)">
            <summary>
            Проверяет не является ли ссылка на объект пустой
            и является ли объект наследником указанного типа. 
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="instance">
            Объект (один из параметров метода, из которого вызывается).
            </param>
            <param name="baseType">
            Базовый тип.
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если объект равен null,
            то выбрасывается исключение типа ArgumentNullException (с помощью ExceptionHelper.Throw).
            Если объект не является наследником указанного типа,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotNullAndSubclassOfGeneric(System.Object,System.Type,System.String)">
            <summary>
            Проверяет не является ли ссылка на объект пустой
            и является ли объект наследником указанного обобщенного типа. 
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="instance">
            Объект (один из параметров метода, из которого вызывается).
            </param>
            <param name="baseType">
            Базовый обобщенний тип или определение обобщенного типа.
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если объект равен null,
            то выбрасывается исключение типа ArgumentNullException (с помощью ExceptionHelper.Throw).
            Если объект не является наследником указанного обобщенного типа,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotNullAndSubclassOfGeneric(System.Type,System.Type,System.String)">
            <summary>
            Проверяет не является ли ссылка на тип пустой
            и является ли тип наследником указанного обобщенного типа. 
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="instanceType">
            Тип или определение типа (один из параметров метода, из которого вызывается).
            </param>
            <param name="baseType">
            Базовый обобщенний тип или определение обобщенного типа.
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если тип равен null,
            то выбрасывается исключение типа ArgumentNullException (с помощью ExceptionHelper.Throw).
            Если тип не является наследником указанного обобщенного типа,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotNullAndImplementsGenericInterface(System.Object,System.Type,System.String)">
            <summary>
            Проверяет не является ли ссылка на объект пустой
            и реализует ли объект указанный обобщенный интерфейс. 
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="instance">
            Объект (один из параметров метода, из которого вызывается).
            </param>
            <param name="baseType">
            Базовый обобщенний интерфейс или определение обобщенного интерфейса.
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если объект равен null,
            то выбрасывается исключение типа ArgumentNullException (с помощью ExceptionHelper.Throw).
            Если объект не реализует указанный обобщенный интерфейс,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotNullAndImplementsGenericInterface(System.Type,System.Type,System.String)">
            <summary>
            Проверяет не является ли ссылка на тип пустой
            и реализует ли тип указанный обобщенный интерфейс. 
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="instanceType">
            Тип или определение типа (один из параметров метода, из которого вызывается).
            </param>
            <param name="baseType">
            Базовый обобщенний интерфейс или определение обобщенного интерфейса.
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если тип равен null,
            то выбрасывается исключение типа ArgumentNullException (с помощью ExceptionHelper.Throw).
            Если тип не реализует указанный обобщенный интерфейс,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.IsBaseGenericType(System.Type,System.Type)">
            <summary>
            Проверяет является ли тип type наследником обобщенного типа baseType. 
            Отрабатывает и для определений типов.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.IsBaseGenericInterface(System.Type,System.Type)">
            <summary>
            Проверяет реализует ли тип type обобщенный интерфейс baseType. 
            Отрабатывает и для определений типов.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotNull(System.Object,System.String,System.String)">
            <summary>
            Проверяет не является ли ссылка на объект пустой.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="value">
            Объект (один из параметров метода, из которого вызывается).
            </param>
            <param name="message">
            Строка форматирования сообщения.
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если объект равен null,
            то выбрасывается исключение типа ArgumentNullException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.IsBetween(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Проверяет принадлежит ли целое число интервалу (left, right).
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="value">
            Объект (один из параметров метода, из которого вызывается).
            </param>
            <param name="left">
            Левая граница интервала.
            </param>
            <param name="right">
            Правая граница интервала.
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если число не принадлежит интервалу,
            то выбрасывается исключение типа ArgumentOutOfRangeException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.IsBetween(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Проверяет принадлежит ли число типа double интервалу (left, right).
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="value">
            Объект (один из параметров метода, из которого вызывается).
            </param>
            <param name="left">
            Левая граница интервала.
            </param>
            <param name="right">
            Правая граница интервала.
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если число не принадлежит интервалу,
            то выбрасывается исключение типа ArgumentOutOfRangeException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.IsBetween(System.Decimal,System.Decimal,System.Decimal,System.String)">
            <summary>
            Проверяет принадлежит ли число типа decimal интервалу (left, right).
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="value">
            Объект (один из параметров метода, из которого вызывается).
            </param>
            <param name="left">
            Левая граница интервала.
            </param>
            <param name="right">
            Правая граница интервала.
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если число не принадлежит интервалу,
            то выбрасывается исключение типа ArgumentOutOfRangeException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.IsBetween(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Проверяет принадлежит ли число типа float интервалу (left, right).
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="value">
            Объект (один из параметров метода, из которого вызывается).
            </param>
            <param name="left">
            Левая граница интервала.
            </param>
            <param name="right">
            Правая граница интервала.
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если число не принадлежит интервалу,
            то выбрасывается исключение типа ArgumentOutOfRangeException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotLessThanZero(System.Int32,System.String)">
            <summary>
            Проверяет является ли целое число неотрицательным.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="value">
            Объект (один из параметров метода, из которого вызывается).
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если число является отрицательным,
            то выбрасывается исключение типа ArgumentOutOfRangeException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotLessThanZeroOrZero(System.Int32,System.String)">
            <summary>
            Проверяет является ли целое число положительным.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="value">
            Объект (один из параметров метода, из которого вызывается).
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если число не является положительным,
            то выбрасывается исключение типа ArgumentOutOfRangeException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotLessThanZero(System.Int64,System.String)">
            <summary>
            Проверяет является ли long-число неотрицательным.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="value">
            Объект (один из параметров метода, из которого вызывается).
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если число является отрицательным,
            то выбрасывается исключение типа ArgumentOutOfRangeException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotLessThanZeroOrZero(System.Int64,System.String)">
            <summary>
            Проверяет является ли long-число положительным.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="value">
            Объект (один из параметров метода, из которого вызывается).
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если число не является положительным,
            то выбрасывается исключение типа ArgumentOutOfRangeException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotLessThanZero(System.Single,System.String)">
            <summary>
            Проверяет является ли float-число неотрицательным.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="value">
            Объект (один из параметров метода, из которого вызывается).
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если число является отрицательным,
            то выбрасывается исключение типа ArgumentOutOfRangeException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotLessThanZeroOrZero(System.Single,System.String)">
            <summary>
            Проверяет является ли float-число положительным.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="value">
            Объект (один из параметров метода, из которого вызывается).
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если число не является положительным,
            то выбрасывается исключение типа ArgumentOutOfRangeException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotLessThanZero(System.Double,System.String)">
            <summary>
            Проверяет является ли double-число неотрицательным.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="value">
            Объект (один из параметров метода, из которого вызывается).
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если число является отрицательным,
            то выбрасывается исключение типа ArgumentOutOfRangeException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotLessThanZeroOrZero(System.Double,System.String)">
            <summary>
            Проверяет является ли double-число положительным.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="value">
            Объект (один из параметров метода, из которого вызывается).
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если число не является положительным,
            то выбрасывается исключение типа ArgumentOutOfRangeException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.InCollection(System.Collections.IDictionary,System.Object,System.String)">
            <summary>
            Проверяет содержит ли словарь элемент с указанным ключом.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="collection">
            Словарь.
            </param>
            <param name="value">
            Ключ (один из параметров метода, из которого вызывается).
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если словарь не содердит элемент с указанным ключом,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.InCollection(System.Collections.IEnumerable,System.Object,System.String)">
            <summary>
            Проверяет содержит ли коллекция указанный объект.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="collection">
            Коллекция.
            </param>
            <param name="value">
            Объект (один из параметров метода, из которого вызывается).
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если коллекция не содержит указанный объект,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotInCollection(System.Collections.IDictionary,System.Object,System.String)">
            <summary>
            Проверяет отсутствие элемент с указанным ключом в словаре.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="collection">
            Словарь.
            </param>
            <param name="value">
            Ключ (один из параметров метода, из которого вызывается).
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если словарь содержит элемент с указанным ключом,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            value == null эквивалентен отсутствию.
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotInCollection(System.Collections.IEnumerable,System.Object,System.String)">
            <summary>
            Проверяет отсутствие объекта в коллекции.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="collection">
            Коллекция.
            </param>
            <param name="value">
            Объект (один из параметров метода, из которого вызывается).
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если коллекция содержит указанный объект,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            value == null эквивалентен отсутствию.
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotNull(System.Object,System.String)">
            <summary>
            Проверяет не является ли ссылка на объект пустой.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="value">
            Объект (один из параметров метода, из которого вызывается).
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если объект равен null,
            то выбрасывается исключение типа ArgumentNullException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotNullOrEmpty(System.String,System.String,System.String)">
            <summary>
            Проверяет не является ли ссылка на строку пустой
            и не является ли строка пустой.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="value">
            Строка (один из параметров метода, из которого вызывается).
            </param>
            <param name="message">
            Строка форматирования сообщения.
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если ссылка на строку является пустой,
            то выбрасывается исключение типа ArgumentNullException (с помощью ExceptionHelper.Throw).
            Если строка является пустой,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotNullOrEmptyAndMatches(System.String,System.String,System.String)">
            <summary>
            Проверяет не является ли ссылка на строку пустой, не является ли строка пустой
            и содержит ли строка указанное регулярное выражение.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="value">
            Строка (один из параметров метода, из которого вызывается).
            </param>
            <param name="regex">
            Регулярное выражение (строка).
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если ссылка на строку является пустой,
            то выбрасывается исключение типа ArgumentNullException (с помощью ExceptionHelper.Throw).
            Если строка является пустой или не содержит указанное регулярное выражение,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotNullOrEmptyAndMatches(System.String,System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Проверяет не является ли ссылка на строку пустой, не является ли строка пустой
            и содержит ли строка указанное регулярное выражение.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="value">
            Строка (один из параметров метода, из которого вызывается).
            </param>
            <param name="regex">
            Регулярное выражение.
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если ссылка на строку является пустой,
            то выбрасывается исключение типа ArgumentNullException (с помощью ExceptionHelper.Throw).
            Если строка является пустой или не содержит указанное регулярное выражение,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotNullOrEmpty(System.String,System.String)">
            <summary>
            Проверяет не является ли ссылка на строку пустой
            и не является ли строка пустой.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="value">
            Строка (один из параметров метода, из которого вызывается).
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если ссылка на строку является пустой,
            то выбрасывается исключение типа ArgumentNullException (с помощью ExceptionHelper.Throw).
            Если строка является пустой,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotNullOrEmptyOrWhitespace(System.String,System.String)">
            <summary>
            Проверяет не является ли ссылка на строку пустой, не является ли строка пустой
            и не содержит ли строка только пробельные символы.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="value">
            Строка (один из параметров метода, из которого вызывается).
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если ссылка на строку является пустой,
            то выбрасывается исключение типа ArgumentNullException (с помощью ExceptionHelper.Throw).
            Если строка является пустой или содержит только пробельные символы,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotNullAndLengthNotLessThan(System.Array,System.Int32,System.String,System.String)">
            <summary>
            Проверяет не является ли ссылка на массив пустой
            и содержит ли массив указаное минимальное количество элементов.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="array">
            Массив (один из параметров метода, из которого вызывается).
            </param>
            <param name="minimumLength">
            Минимальное количество элементов.
            </param>
            <param name="message">
            Строка форматирования сообщения.
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если ссылка на массив является пустой,
            то выбрасывается исключение типа ArgumentNullException (с помощью ExceptionHelper.Throw).
            Если массив не содержит указаное минимальное количество элементов,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotNullOrEmpty(System.Array,System.String,System.String)">
            <summary>
            Проверяет не является ли ссылка на массив пустой
            и не является ли массив пустым.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="collection">
            Массив (один из параметров метода, из которого вызывается).
            </param>
            <param name="message">
            Строка форматирования сообщения.
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если ссылка на массив является пустой,
            то выбрасывается исключение типа ArgumentNullException (с помощью ExceptionHelper.Throw).
            Если массив является пустым,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotNullOrEmpty(System.Collections.IEnumerable,System.String)">
            <summary>
            Проверяет не является ли ссылка на коллекцию пустой
            и не является ли коллекция пустой.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="collection">
            Коллекция (один из параметров метода, из которого вызывается).
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если ссылка на коллекцию является пустой,
            то выбрасывается исключение типа ArgumentNullException (с помощью ExceptionHelper.Throw).
            Если коллекция является пустой,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.ValidEnumerationValue``1(``0,System.String)">
            <summary>
            Проверяет, существует ли постоянная с указанным значением в заданном перечислении.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="value">
            Постоянная (один из параметров метода, из которого вызывается).
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <typeparam name="TType">
            Тип постоянной.
            </typeparam>
            <remarks>
            Если постоянная с указанным значением в заданном перечислении не существует,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
            
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotNullWritableStream(System.IO.Stream,System.String)">
            <summary>
            Проверяет, не является ли ссылка на поток пустой
            и поддерживает ли поток запись.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="document">
            Поток (один из параметров метода, из которого вызывается).
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если ссылка на поток является пустой,
            то выбрасывается исключение типа ArgumentNullException (с помощью ExceptionHelper.Throw).
            Если поток не поддерждивает запись,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotNullReadableNotEmptyStream(System.IO.Stream,System.String)">
            <summary>
            Проверяет, не является ли ссылка на поток пустой,
            поддерживает ли поток чтение, не пустой ли поток
            и остались ли в потоке данные для чтения (с текущей позиции).
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="document">
            Поток (один из параметров метода, из которого вызывается).
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если ссылка на поток является пустой,
            то выбрасывается исключение типа ArgumentNullException (с помощью ExceptionHelper.Throw).
            В оставшихся трех случаях выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotNullInterface(System.Type,System.String)">
            <summary>
            Проверяет, не является ли ссылка на тип пустой
            и является ли тип интерфесом.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="type">
            Тип (один из параметров метода, из которого вызывается).
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если ссылка на тип является пустой,
            то выбрасывается исключение типа ArgumentNullException (с помощью ExceptionHelper.Throw).
            Если тип не является интерфейсом,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotNullInterface(System.Type,System.String,System.String)">
            <summary>
            Проверяет, не является ли ссылка на тип пустой
            и является ли тип интерфесом.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="type">
            Тип (один из параметров метода, из которого вызывается).
            </param>
            <param name="message">
            Строка форматирования сообщения.
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если ссылка на тип является пустой,
            то выбрасывается исключение типа ArgumentNullException (с помощью ExceptionHelper.Throw).
            Если тип не является интерфейсом,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotNullInterfaceAssignableTo(System.Type,System.Type,System.String)">
            <summary>
            Проверяет, не является ли ссылка на тип пустой, является ли тип интерфесом
            и приводится ли тип к интерфейсу, указанному в параметре assignableTo.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="type">
            Тип (один из параметров метода, из которого вызывается).
            </param>
            <param name="assignableTo">
            Интерфейс, приведение к которому проверяется.
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если ссылка на тип является пустой,
            то выбрасывается исключение типа ArgumentNullException (с помощью ExceptionHelper.Throw).
            В оставшихся двух случаях выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotNullAssignableTo(System.Object,System.Type,System.String)">
            <summary>
            Проверяет, не является ли ссылка на объект пустой
            и приводится ли объект к типу, указанному в параметре assignableTo.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="instance">
            Объект (один из параметров метода, из которого вызывается).
            </param>
            <param name="assignableTo">
            Тип, приведение к которому проверяется.
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если ссылка на объект является пустой,
            то выбрасывается исключение типа ArgumentNullException (с помощью ExceptionHelper.Throw).
            Если объект не приводится к указанному типу,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotNullAssignableTo(System.Type,System.Type,System.String)">
            <summary>
            Проверяет, не является ли ссылка на тип пустой
            и приводится ли он к типу, указанному в параметре assignableTo.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="instanceType">
            Тип (один из параметров метода, из которого вызывается).
            </param>
            <param name="assignableTo">
            Тип, приведение к которому проверяется.
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если ссылка на тип является пустой,
            то выбрасывается исключение типа ArgumentNullException (с помощью ExceptionHelper.Throw).
            Если тип не приводится к указанному типу,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotNullInterfaceAssignableTo(System.Type,System.Type,System.String,System.String)">
            <summary>
            Проверяет, не является ли ссылка на тип пустой, является ли тип интерфесом
            и приводится ли тип к интерфейсу, указанному в параметре assignableFrom.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="type">
            Тип (один из параметров метода, из которого вызывается).
            </param>
            <param name="assignableFrom">
            Интерфейс, приведение к которому проверяется.
            </param>
            <param name="message">
            Строка форматирования сообщения.
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если ссылка на тип является пустой,
            то выбрасывается исключение типа ArgumentNullException (с помощью ExceptionHelper.Throw).
            В оставшихся двух случаях выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotNullNonAbstract(System.Type,System.String)">
            <summary>
            Проверяет, не является ли ссылка на тип пустой
            и не является ли тип абстрактным.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="type">
            Тип (один из параметров метода, из которого вызывается).
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если ссылка на тип является пустой,
            то выбрасывается исключение типа ArgumentNullException (с помощью ExceptionHelper.Throw).
            Если тип является абстрактным,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotNullGenericTypeDefinition(System.Type,System.String)">
            <summary>
            Проверяет, не является ли ссылка на тип пустой
            и является ли тип описанием обобщенного типа.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="type">
            Тип (один из параметров метода, из которого вызывается).
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если ссылка на тип является пустой,
            то выбрасывается исключение типа ArgumentNullException (с помощью ExceptionHelper.Throw).
            Если тип не является описанием обобщенного типа,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotNullGenericInterfaceDefinition(System.Type,System.String)">
            <summary>
            Проверяет, не является ли ссылка на тип пустой
            и является ли тип описанием обобщенного интерфейса.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="type">
            Тип (один из параметров метода, из которого вызывается).
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если ссылка на тип является пустой,
            то выбрасывается исключение типа ArgumentNullException (с помощью ExceptionHelper.Throw).
            Если тип не является описанием обобщенного интерфейса,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotNullAndIsInterface(System.Type,System.String)">
            <summary>
            Проверяет, не является ли ссылка на тип пустой
            и является ли тип интерфейсом.
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="type">
            Тип (один из параметров метода, из которого вызывается).
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если ссылка на тип является пустой,
            то выбрасывается исключение типа ArgumentNullException (с помощью ExceptionHelper.Throw).
            Если тип не является интерфейсом,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.ArgumentChecker.NotEquals(System.Object,System.Object,System.String)">
            <summary>
            Проверяет, не является ли ссылка на объект пустой и равен ли он объекту anotherValue.
            Объекты считаются равными, если операция == или метод Equals возвращают true. 
            Предназначен для проверки параметров метода, из которого вызывается.
            </summary>
            <param name="value">
            Объект (один из параметров метода, из которого вызывается).
            </param>
            <param name="anotherValue">
            Объект, с которым сравниваем.
            </param>
            <param name="parameterName">
            Имя параметра метода.
            </param>
            <remarks>
            Если ссылка на тип является пустой,
            то выбрасывается исключение типа ArgumentNullException (с помощью ExceptionHelper.Throw).
            Если объекты не равны,
            то выбрасывается исключение типа ArgumentException (с помощью ExceptionHelper.Throw).
            </remarks>
        </member>
        <member name="T:Bars.B4.Utils.Annotations.AssertionConditionAttribute">
            Задает утверждение для параметра метода утверждения. 
            Сам метод должен быть отмечен атрибутом <see cref="T:Bars.B4.Utils.Annotations.AssertionMethodAttribute"/>.
            Обязательным аргументом атрибута является тип утверждения (см. <see cref="T:Bars.B4.Utils.Annotations.AssertionConditionType"/>).
        </member>
        <member name="M:Bars.B4.Utils.Annotations.AssertionConditionAttribute.#ctor(Bars.B4.Utils.Annotations.AssertionConditionType)">
            <summary>
            Создает экземпляр класса.
            </summary>
            <param name = "conditionType">
             Тип утверждения.
            </param>
        </member>
        <member name="P:Bars.B4.Utils.Annotations.AssertionConditionAttribute.ConditionType">
            <summary>
            Получить тип утверждения.
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.Annotations.AssertionConditionType">
            <summary>
            Задает тип утверждения. Если аргумент метода утверждения удовлетворяет условию, то выполнение продолжается.
            В противном случае, выполнение будет остановлено.
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.Annotations.AssertionConditionType.IS_TRUE">
            <summary>
            Указывает на то, что отмеченный параметр должен быть равен true.
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.Annotations.AssertionConditionType.IS_FALSE">
            <summary>
             Указывает на то, что отмеченный параметр должен быть равен false.
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.Annotations.AssertionConditionType.IS_NULL">
            <summary>
            Указывает на то, что отмеченный параметр должен быть равен null.
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>
              Указывает на то, что отмеченный параметр не должен быть равен null.
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.Annotations.AssertionMethodAttribute">
            <summary>
            Указывает на то, что помеченный метод является методом утверждения,
            то есть останавливает поток управления, если одно из условий не выполнено. 
            Чтобы установить условие, отмечают один из параметров метода атрибутом <see cref="T:Bars.B4.Utils.Annotations.AssertionConditionAttribute"/>.
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.Annotations.CanBeNullAttribute">
            <summary>
            Атрибут, указывающий, что значение отмеченного элемента иногда может быть null.
            До его использования необходима проверка на null.
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
              Indicates that the value of marked type (or its derivatives) cannot be compared using '==' or '!=' operators.
              There is only exception to compare with <c>null</c>, it is permitted
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.Annotations.ContractAnnotationAttribute">
            <summary>Describes dependency between method input and output.</summary>
            <syntax>
              <p>Function Definition Table syntax:</p>
              <list>
              <item>FDT      ::= FDTRow [;FDTRow]*</item>
              <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
              <item>Input    ::= ParameterName: Value [, Input]*</item>
              <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
              <item>Value    ::= true | false | null | notnull | canbenull</item>
              </list>
            If method has single input parameter, it's name could be omitted. <br />
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for method output means that the methos doesn't return normally. <br />
              <c>canbenull</c> annotation is only applicable for output parameters. <br />
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute with rows separated by semicolon. <br />
            </syntax>
            <examples>
              <list>
              <item><code>
            [ContractAnnotation("=&gt; halt")]
            public void TerminationMethod()
              </code></item>
              <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // Regular Assertion method
              </code></item>
              <item><code>
            [ContractAnnotation("s:null =&gt; true")]
            public bool IsNullOrEmpty(string s) // String.IsNullOrEmpty
              </code></item>
              <item><code>
            A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null =&gt; null; notnull =&gt; notnull")]
            public object Transform(object data)
              </code></item>
              <item><code>
            [ContractAnnotation("s:null=&gt;false; =&gt;true,result:notnull; =&gt;false, result:null")]
            public bool TryParse(string s, out Person result)
              </code></item>
              </list>
            </examples>
        </member>
        <member name="T:Bars.B4.Utils.Annotations.ImplicitUseTargetFlags">
            <summary>
              Specify what is considered used implicitly when marked with <see cref="T:Bars.B4.Utils.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:Bars.B4.Utils.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.Annotations.ImplicitUseTargetFlags.Members">
            <summary>
              Members of entity marked with attribute are considered used
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>
              Entity marked with attribute and all its members considered used
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.Annotations.InvokerParameterNameAttribute">
            <summary>
            Указывает, что аргумент функции должен быть строковым литералом и соответствовать одному из параметров вызывающей функции. 
            Например, <see CREF = "ArgumentNullException"/> имеет такой параметр.
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.Annotations.LocalizationRequiredAttribute">
            <summary>
              Indicates that marked element should be localized or not.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.LocalizationRequiredAttribute.#ctor(System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:Bars.B4.Utils.Annotations.LocalizationRequiredAttribute"/> class.
            </summary>
            <param name="required"><c>true</c> if a element should be localized; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.LocalizationRequiredAttribute.Equals(System.Object)">
            <summary>
              Returns whether the value of the given object is equal to the current <see cref="T:Bars.B4.Utils.Annotations.LocalizationRequiredAttribute"/>.
            </summary>
            <param name="obj">The object to test the value equality of. </param>
            <returns>
              <c>true</c> if the value of the given object is equal to that of the current; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.LocalizationRequiredAttribute.GetHashCode">
            <summary>
              Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current <see cref="T:Bars.B4.Utils.Annotations.LocalizationRequiredAttribute"/>.</returns>
        </member>
        <member name="P:Bars.B4.Utils.Annotations.LocalizationRequiredAttribute.Required">
            <summary>
              Gets a value indicating whether a element should be localized.
              <value><c>true</c> if a element should be localized; otherwise, <c>false</c>.</value>
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.Annotations.MeansImplicitUseAttribute">
            <summary>
              Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.Annotations.MeansImplicitUseAttribute.TargetFlags">
            <summary>
              Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.Annotations.NotNullAttribute">
            <summary>
            Атрибут, указывающий, что значение отмеченного элемента никогда не может быть null.
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.Annotations.StringFormatMethodAttribute">
            <summary>
              Indicates that marked method builds string by format pattern and (optional) arguments. 
              Parameter, which contains format string, should be given in constructor.
              The format string should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> -like form
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <summary>
              Initializes new instance of StringFormatMethodAttribute
            </summary>
            <param name = "formatParameterName">Specifies which parameter of an annotated method should be treated as format-string</param>
        </member>
        <member name="P:Bars.B4.Utils.Annotations.StringFormatMethodAttribute.FormatParameterName">
            <summary>
              Gets format parameter name
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.Annotations.TerminatesProgramAttribute">
            <summary>
            Указывает, что помеченный метод безоговорочно завершает выполнение потока управления.
            Например, может безусловно выбросить исключение.
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.Annotations.UsedImplicitlyAttribute">
            <summary>
              Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
              so this symbol will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.Annotations.UsedImplicitlyAttribute.TargetFlags">
            <summary>
              Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.AssemblyPublisherAttribute">
            <summary>
            Атрибут указывающий публикатора сборки
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.AssemblyPublisherAttribute.#ctor(System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="publisher">Имя опубликовавшего сборку</param>
        </member>
        <member name="P:Bars.B4.Utils.AssemblyPublisherAttribute.Publisher">
            <summary>
            Имя опубликовавшего сборку
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.AssemblyAuthorAttribute">
            <summary>
            Атрибут указывающий автора сборки
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.AssemblyAuthorAttribute.#ctor(System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="author">Имя автора сборки</param>
        </member>
        <member name="P:Bars.B4.Utils.AssemblyAuthorAttribute.Author">
            <summary>
            Имя автора
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.DependsOnAttribute">
            <summary>
            Атрибут, указывающий идентификатор модуля, от которого зависит текущий модуль
            (и который необходимо загрузить перед текущим модулем).
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.DependsOnAttribute.#ctor(System.String)">
            <summary>
            Создает новый экземпляр атрибута.
            </summary>
            <param name="dependsOn">Идентификатор модуля.</param>
        </member>
        <member name="P:Bars.B4.Utils.DependsOnAttribute.DependsOn">
            <summary>
            Идентификатор модуля, от которого зависит модуль, определенный в сборке.
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.DescriptionAttribute">
            <summary>
            Атрибут, позволяющий указать текстовое описание элемента.
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.StringValueAttribute">
            <summary>
            Атрибут, содержащий строковые значения.
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.CustomValueAttribute">
            <summary>
            Атрибут мета-данных.
            Позволяет указать любую дополнительную мета-информацию.
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.CustomAttribute">
            <summary>
            Базовый класс для создания дополнительных атрибутов.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.CustomAttribute.ToString">
            <summary>
            Возвращает строку вида "<see cref="P:Bars.B4.Utils.CustomAttribute.Uid"/> (<see cref="P:Bars.B4.Utils.CustomAttribute.Alias"/>)".
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.CustomAttribute.GetAttributeAlias">
            <summary>
            Формирование псевдонима атрибута с использованием префикса <see cref="P:Bars.B4.Utils.CustomAttribute.GroupUid"/>.       
            </summary>        
            <returns>
            Псевдоним атрибута вида <see cref="P:Bars.B4.Utils.CustomAttribute.GroupUid"/>.Name (имя без суффикса Attribute).
            </returns>
        </member>
        <member name="P:Bars.B4.Utils.CustomAttribute.GroupUid">
            <summary>
            Возвращает идентификатор группы атрибута (строка "Custom"). 
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.CustomAttribute.Alias">
            <summary>
            Возвращает псевдоним атрибута вида <see cref="P:Bars.B4.Utils.CustomAttribute.GroupUid"/>.Name (имя без суффикса Attribute).
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.CustomAttribute.Uid">
            <summary>
            Возвращает идентификатор атрибута.
            Формирует идентификатор вида "Полное имя класса, Наименование сборки".
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.CustomAttribute.TypeId">
            <summary>
            Возвращает идентификатор типа атрибута.
            Формирует идентификатор вида "Полное имя класса, Наименование сборки".
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.CustomValueAttribute.#ctor(System.String,System.Object)">
            <summary>
            Создает новый экземпляр <see cref="T:Bars.B4.Utils.CustomValueAttribute"/>.
            </summary>
            <param name="key">Ключ атрибута.</param>
            <param name="value">Значение атрибута.</param>
        </member>
        <member name="M:Bars.B4.Utils.CustomValueAttribute.#ctor(System.String)">
            <summary>
            Создает новый экземпляр <see cref="T:Bars.B4.Utils.CustomValueAttribute"/> с Null-значением.
            </summary>
            <param name="key">Ключ атрибута.</param>
        </member>
        <member name="M:Bars.B4.Utils.CustomValueAttribute.ToString">
            <summary>
            Возвращает строку вида "Uid (Key = Value)".
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.CustomValueAttribute.Key">
            <summary>
            Ключ.
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.CustomValueAttribute.Value">
            <summary>
            Значение.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.StringValueAttribute.#ctor(System.String,System.String)">
            <summary>
            Создает новый экземпляр класса <see cref="T:Bars.B4.Utils.StringValueAttribute"/>.
            </summary>
            <param name="key">Ключ.</param>
            <param name="value">Значение.</param>
        </member>
        <member name="M:Bars.B4.Utils.StringValueAttribute.#ctor(System.String)">
            <summary>
            Создает новый экземпляр класса <see cref="T:Bars.B4.Utils.StringValueAttribute"/>
            со значением string.Empty.
            </summary>
            <param name="key">Ключ.</param>
        </member>
        <member name="P:Bars.B4.Utils.StringValueAttribute.Value">
            <summary>
            Значение атрибута.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.DescriptionAttribute.#ctor(System.String)">
            <summary>
            Создает новый экземпляр атрибута с указанным описанием.
            </summary>
            <param name="description">Описание элемента.</param>
        </member>
        <member name="M:Bars.B4.Utils.DescriptionAttribute.#ctor">
            <summary>
            Создает новый экземпяр атрибута без описания.
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.AttributeNotFoundInContainerException">
            <summary>
            Класс исключительной ситуации, которая происходит при отсутствии атрибута в контейнере.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.AttributeNotFoundInContainerException.#ctor(System.Type,System.Type)">
            <summary>
            Создает новый экземпляр класса <see cref="T:Bars.B4.Utils.AttributeNotFoundInContainerException"/>.
            </summary>
            <param name="attributeType">Тип атрибута.</param>
            <param name="containerType">Тип контейнера.</param>
        </member>
        <member name="T:Bars.B4.Utils.AttributesContainer">
            <summary>
            Контейнер атрибутов.
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.IAttributesContainer">
            <summary>
            Интерфейс контейнера атрибутов.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.IAttributesContainer.GetAttributes``1(System.Boolean)">
            <summary>
            Получение массива атрибутов типа <see cref="!:T"/>, либо являющимися наследниками этого типа.
            </summary>
            <param name="inherit">
            Включать наследников типа атрибута <see cref="!:T"/>.
            </param>
            <typeparam name="T">Тип атрибута.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.IAttributesContainer.GetAttributes">
            <summary>
            Получение общего массива зарегистрированных в контейнере атрибутов.
            </summary>        
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.IAttributesContainer.GetAttribute``1(System.Boolean)">
            <summary>
            Получение типизированного атрибута.
            Попытка получить атрибут производится в два шага:
            1. Проверка коллекции атрибутов <see cref="P:Bars.B4.Utils.AttributesContainer.Attributes"/>.
            2. Проверка атрибутов текущего типа и его цепочки иерархии.
            </summary>
            <typeparam name="T">
            Тип атрибута. Является наследником <see cref="T:Bars.B4.Utils.CustomAttribute"/>.
            </typeparam>
            <param name="throwIfNotExists">
            <see cref="!:bool.True"/>, если необходимо выбросить исключение при отсутствии атрибута с таким типом.
            <see cref="!:bool.False"/>, если допускается вернуть null.
            </param>
            <returns>
            Атрибут заданного типа, либо null если такой атрибут не обнаружен.
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.IAttributesContainer.SetAttribute``1(``0,System.Boolean)">
            <summary>
            Добавление атрибута в контейнер.
            </summary>
            <typeparam name="T">
            Тип добавляемого атрибута. Является наследником <see cref="T:Bars.B4.Utils.CustomAttribute"/>.
            </typeparam>
            <param name="attribute">
            Экземпляр атрибута.
            </param>
            <param name="throwIfExists">
            <see>
                <cref>bool.True</cref>
            </see>
            , если необходимо выбросить исключение при наличии атрибута с таким же типом.
            <see>
                <cref>bool.False</cref>
            </see>
            , если необходимо подменить значение атрибута с таким же типом.
            </param>
        </member>
        <member name="M:Bars.B4.Utils.IAttributesContainer.RemoveAttribute``1(System.Predicate{``0})">
            <summary>
            Удаление атрибута.
            </summary>
            <param name="selector">
            Предикат, позволяющий выделить атрибуты для удаления.
            </param>
            <typeparam name="T">Тип атрибута</typeparam>
            <returns></returns>
        </member>
        <member name="F:Bars.B4.Utils.AttributesContainer._typeAttributes">
            <summary>
            Список атрибутов типа (атрибутов, которые навешены на сам контейнер).
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.AttributesContainer.#ctor">
            <summary>
            Создает экземпляр класса <see cref="T:Bars.B4.Utils.AttributesContainer"/>.
            Заполняет список атрибутов типа (атрибутов, которые навешены на сам контейнер).
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.AttributesContainer.GetAttributes``1(System.Boolean)">
            <summary>
            Получение массива атрибутов типа <see cref="!:T"/>, либо являющимися наследниками этого типа.
            </summary>
            <param name="inherit">Включать наследников типа атрибута <see cref="!:T"/>.</param>
            <typeparam name="T">Тип атрибута.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.AttributesContainer.GetAttributes">
            <summary>
            Получение общего массива зарегистрированных в контейнере атрибутов.
            </summary>        
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.AttributesContainer.GetAttribute``1(System.Boolean)">
            <summary>
            Получение типизированного атрибута.
            Попытка получить атрибут производится в два шага:
            1. Проверка коллекции атрибутов <see cref="P:Bars.B4.Utils.AttributesContainer.Attributes"/>.
            2. Проверка атрибутов текущего типа и его цепочки иерархии.
            </summary>
            <typeparam name="T">Тип атрибута. Является наследником <see cref="T:Bars.B4.Utils.CustomAttribute"/>.</typeparam>
            <param name="throwIfNotExists">
            <see cref="!:bool.True"/>, если необходимо выбросить исключение при отсутствии атрибута с таким типом.
            <see cref="!:bool.False"/>, если допускается вернуть null.
            </param>
            <returns>Атрибут заданного типа, либо null если такой атрибут не обнаружен.</returns>
        </member>
        <member name="M:Bars.B4.Utils.AttributesContainer.SetAttribute``1(``0,System.Boolean)">
            <summary>
            Добавление атрибута в контейнер.
            </summary>
            <typeparam name="T">Тип добавляемого атрибута. Является наследником <see cref="T:Bars.B4.Utils.CustomAttribute"/>.</typeparam>
            <param name="attribute">Экземпляр атрибута.</param>
            <param name="throwIfExists">
            <see>
                <cref>bool.True</cref>
            </see>
            , если необходимо выбросить исключение при наличии атрибута с таким же типом.
            <see>
                <cref>bool.False</cref>
            </see>
            , если необходимо подменить значение атрибута с таким же типом.
            </param>
        </member>
        <member name="M:Bars.B4.Utils.AttributesContainer.RemoveAttribute``1(System.Predicate{``0})">
            <summary>
            Удаление атрибута.
            Не удаляет атрибуты типа (атрибуты, которые навешены на сам контейнер).
            </summary>
            <param name="selector">Предикат, позволяющий выделить атрибуты для удаления.</param>
            <typeparam name="T">Тип атрибута.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.AttributesContainer.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Получение массива атрибутов указанного типа, либо являющимися наследниками этого типа.
            </summary>
            <param name="attributeType">
            Тип атрибута.
            </param>
            <param name="inherit">
            Включать наследников типа атрибута.
            </param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.AttributesContainer.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)">
            <summary>
            Получение общего массива зарегистрированных в контейнере атрибутов.
            </summary>
            <param name="inherit">
                Не используется.
            </param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.AttributesContainer.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)">
            <summary>
            Возвращает true, если контейнер содержит атрибут указанного типа, либо атрибут типа наследника.
            </summary>
            <param name="attributeType">
            Тип атрибута.
            </param>
            <param name="inherit">
            Проверять наследников типа атрибута.
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:Bars.B4.Utils.AttributesContainer.Attributes">
            <summary>
            Список атрибутов, размещенных в контейнере.
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.AttributeTypeExistsInContainerException">
            <summary>
            Класс исключительной ситуации, которая происходит при попытке добавить повторяющийся тип атрибута в контейнер.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.AttributeTypeExistsInContainerException.#ctor(System.Type,System.Type)">
            <summary>
            Создает новый экземпляр класса <see cref="T:Bars.B4.Utils.AttributeTypeExistsInContainerException"/>.
            </summary>
            <param name="attributeType">Тип атрибута.</param>
            <param name="containerType">Тип контейнера.</param>
        </member>
        <member name="T:Bars.B4.Utils.DisplayAttribute">
            <summary>
            Атрибут, позволяющий указать отображаемое имя.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.DisplayAttribute.#ctor(System.String)">
            <summary>
            Создает новый экземпляр атрибута.
            </summary>
            <param name="displayName">Отображаемое имя.</param>
        </member>
        <member name="M:Bars.B4.Utils.DisplayAttribute.#ctor">
            <summary>
            Создает новый экземпляр атрибута.
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.GroupAttribute">
            <summary>
            Атрибут, позволяющий указать имя логической группы элементов.    
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.GroupAttribute.#ctor(System.String)">
            <summary>
            Создает новый экземпляр атрибута.
            </summary>
            <param name="groupUid">Идентификатор группы.</param>        
        </member>
        <member name="M:Bars.B4.Utils.GroupAttribute.#ctor">
            <summary>
            Создает новый экземпляр атрибута.
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.IgnoreAttribute">
            <summary>
            Атрибут указывающий, что элемент кода необходимо игнорировать.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.IgnoreAttribute.#ctor(System.String)">
            <summary>
            Создает новый экземпляр атрибута.
            </summary>
            <param name="context">Контекст атрибута.</param>
        </member>
        <member name="M:Bars.B4.Utils.IgnoreAttribute.#ctor">
            <summary>
            Создает новый экземпляр атрибута с нулевым контекстом.
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.IgnoreAttribute.Context">
            <summary>
            Строковый идентификатор контекста, в рамках которого необходимо игнорировать элемент.
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.ModuleIdAttribute">
            <summary>
            Атрибут, указывающий идентификатор модуля, определенного в сборке.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.ModuleIdAttribute.#ctor(System.String)">
            <summary>
            Создает новый экземпляр атрибута.
            </summary>
            <param name="id">Идентификатор модуля.</param>
        </member>
        <member name="P:Bars.B4.Utils.ModuleIdAttribute.Id">
            <summary>
            Идентификатор модуля, определенного в сборке.
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.PropertyDisplayAttribute">
            <summary>
            Атрибут, позволяющий указать отображаемое имя свойства класса.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.PropertyDisplayAttribute.#ctor(System.String,System.String)">
            <summary>
            Создает новый экземпляр атрибута.
            </summary>
            <param name="propertyName">Имя поля.</param>
            <param name="displayName">Отображаемое имя поля.</param>        
        </member>
        <member name="M:Bars.B4.Utils.PropertyDisplayAttribute.#ctor">
            <summary>
            Создает новый экземпляр атрибута.
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.PropertyDisplayAttribute.Name">
            <summary>
            Имя свойства.
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.PropertyDisplayAttribute.Display">
            <summary>
            Отображаемое имя свойства.
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.Converters.ITypeConverter`2">
            <summary>
            Интерфейс конвертера данных
            </summary>
            <typeparam name="TSource">Тип источника</typeparam>
            <typeparam name="TTarget">Целевой тип</typeparam>
        </member>
        <member name="M:Bars.B4.Utils.Converters.ITypeConverter`2.Convert(`0)">
            <summary>
            Конвертация значения
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.Converters.ITypeConverter`2.ConvertBack(`1)">
            <summary>
            Обратная конвертация значения
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Bars.B4.Utils.ConvertHelper">
            <summary>
            Вспомогательный класс с методами конвертации
            значений в различные типы.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.ConvertHelper.IsDictionary(System.Type)">
            <summary>
            Выполняет проверку, является ли тип словарем.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.ConvertHelper.ToEnum(System.Object,System.Type)">
            <summary>
            Преобразование значения в перечисление.
            </summary>
            <param name="value"></param>
            <param name="toType"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.ConvertHelper.ConvertTo(System.Object,System.Type)">
            <summary>
            Метод преобразования переданного значения в определенный тип.
            Конвертирование в string проводится с помощью вызова метода ToString().
            Пользовательские операции приведения типов не вызываются.
            </summary>
            <param name="value">Конвертируемое значение.</param>
            <param name="toType">Тип, в который необходимо преобразовать значение.</param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.ConvertHelper.ConvertTo``1(System.Object)">
            <summary>
            Метод преобразования переданного значения в определенный тип.
            Отрабатывает через необобщенную версию метода.
            Если не удалось, возвращает default(T).
            </summary>
            <param name="value">Конвертируемое значение.</param>
            <typeparam name="T">Тип, в который необходимо преобразовать значение.</typeparam>
            <returns></returns>
        </member>
        <member name="T:Bars.B4.Utils.DynamicDictionary">
            <summary>
            Динамический словарь - реализует функционал как словаря, так и динамического объекта.
            С иерархическими ключами работают только методы GetValue, SetValue
            и get-часть string-индексатора. 
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.DynamicDictionary.GetDynamicMemberNames">
            <summary>
            Получение списка динамических членов (ключей).
            Возвращает только прямые ключи (см. методы GetValue и SetValue).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicDictionary.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Попытка получения значения динамического свойства.
            Если свойства не было, то оно создается и в него записывается новый динамический словарь,
            который и записывается в параметр result. 
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns>
            Всегда возвращает true.
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicDictionary.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Попытка установки значения динамического свойства. 
            Если свойства не было, то оно создается.
            Всегда возвращает true.
            </summary>
            <param name="binder"></param>
            <param name="value"></param>
            <returns>Всегда возвращает true.</returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicDictionary.SetValue(System.Object,System.Object)">
            <summary>
            Установка значения по ключу.
            Если valueKey.ToString() имеет вид A.B.C, то создаются ключи A и B
            с новыми динамическими словарями, а по ключу C (последний токен) помещается value. 
            </summary>
            <param name="valueKey">Ключ словаря.</param>
            <param name="value">Устанавливаемое значение.</param>
        </member>
        <member name="M:Bars.B4.Utils.DynamicDictionary.Contains(System.String)">
            <summary>
            Проверка на содержание словарем ключа.
            Иерархические ключи не ищет (см. методы GetValue и SetValue).
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicDictionary.GetValue(System.String,System.Boolean)">
            <summary>
            Получение значения из словаря.
            Поиск значения будет произведен
            как по прямому ключу <see cref="!:key"/>, 
            так и по иерархическому.
            Если ключ содержит '.', например Main.Sub.Id,
            то поиск будет произведен сначала по строке 'Main.Sub.Id',
            а затем, если значение не найдено, по пути Main --&gt; Sub --&gt; Id
            Если такого ключа нет, то вернет null.
            </summary>
            <param name="key">Ключ поиска.</param>
            <param name="ignoreCase">Игнорировать ли регистр символов.</param>
            <returns>Объект.</returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicDictionary.GetAs(System.Type,System.String,System.Boolean)">
            <summary>
            Получение значения из словаря и приведение его к определенному типу.
            ! Для ключа со значением "false" при приведении к int возвращает null.
            </summary>
            <param name="asType">Тип, к которому необходимо привести значение.</param>        
            <param name="key">Ключ словаря.</param>        
            <param name="ignoreCase">Игнорировать ли регистр символов.</param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicDictionary.GetAs``1(System.String,``0,System.Boolean)">
            <summary>
            Получение значения из словаря и приведение его к определенному типу.
            Если получить значение не удалось, то возвращается дефолтное значение.
            </summary>
            <param name="key">Ключ словаря.</param>
            <param name="defaultValue">Дефолтное значение.</param>
            <param name="ignoreCase">Игнорировать ли регистр символов.</param>
            <typeparam name="TValue">Тип, к которому необходимо привести значение.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicDictionary.GetAs``1(System.String,System.Linq.Expressions.Expression{System.Func{``0}},System.Boolean)">
            <summary>
            Получение значения из словаря и приведение его к определенному типу.
            Если тип является ReferenceType и получить значение не удалось,
            то возвращается значение, созданное с помощью выражения.
            </summary>
            <param name="key">Ключ словаря.</param>
            <param name="defaultValueExpr">Выражение.</param>
            <param name="ignoreCase"></param>
            <typeparam name="TValue">Тип, к которому необходимо привести значение.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicDictionary.GetOne``1(System.String[],``0,System.Boolean)">
            <summary>
            По списку ключей получает первое !null значение словаря и приводит его к указанному типу.
            </summary>
            <param name="keys">Список ключей словаря.</param>
            <param name="defaultValue"></param>
            <param name="ignoreCase"></param>
            <typeparam name="TValue">Тип, к которому необходимо привести значение</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicDictionary.WriteInstance``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Записывает объект в динамический словарь.
            </summary>
            <param name="instance">Объект.</param>
            <param name="skipProperties"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Bars.B4.Utils.DynamicDictionary.Create">
            <summary>
            Возвращает экземпляр класса созданный с помощью конструктора по умолчанию.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicDictionary.FromJson(System.String,System.Collections.Generic.IEnumerable{Newtonsoft.Json.JsonConverter})">
            <summary>
            Распарсивает Json-объект в динамический словарь.
            </summary>
            <param name="json"></param>
            <param name="converters"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicDictionary.Apply``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Добавляет элементы словаря, указанного в параметре, к текущему.
            </summary>
            <param name="appliable">
            Добавляемый словарь.
            </param>
            <typeparam name="T">
            Тип значений добавляемого словаря.
            </typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicDictionary.ApplyIf(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Добавляет элементы словаря, указанного в параметре, к текущему.
            Элементы с уже имеющимися в словаре ключами не добавляются.
            </summary>
            <param name="appliable">
            Добавляемый словарь.
            </param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicDictionary.#ctor">
            <summary>
            Создает экземпляр класса.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.DynamicDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Возвращает перечислитель, который осуществляет перебор элементов коллекции.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicDictionary.GetEnumerator">
            <summary>
            Возвращает перечислитель, выполняющий итерацию в коллекции.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicDictionary.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            Добавление в словарь ключа со значением.
            Ключи, имеющие вид A.B.C, добавляются как прямые (см. методы GetValue и SetValue).
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Bars.B4.Utils.DynamicDictionary.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Возвращает перечислитель, который осуществляет перебор элементов коллекции.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicDictionary.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            Проверка на содержание словарем ключа.
            Иерархические ключи не ищет (см. методы GetValue и SetValue).
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicDictionary.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            Удаляет элемент с указанным ключом.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Bars.B4.Utils.DynamicDictionary.Add(System.String,System.Object)">
            <summary>
            Добавление в словарь ключа со значением.
            Ключи, имеющие вид A.B.C, добавляются как прямые (см. методы GetValue и SetValue).
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Bars.B4.Utils.DynamicDictionary.ContainsKey(System.String)">
            <summary>
            Проверка на содержание словарем ключа.
            Иерархические ключи не ищет (см. методы GetValue и SetValue).
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicDictionary.Remove(System.String)">
            <summary>
            Удаляет элемент с указанным ключом.
            </summary>
            <returns>
            Значение true, если элемент успешно удален, в противном случае — значение false.
            Этот метод также возвращает значение false, если ключ не найден в исходном объекте.
            </returns>
            <param name="key"></param>
        </member>
        <member name="M:Bars.B4.Utils.DynamicDictionary.TryGetValue(System.String,System.Object@)">
            <summary>
            Получает значение, связанное с указанным ключом.
            </summary>
            <returns>
            </returns>
            <param name="key">
            Ключ, значение которого необходимо получить.
            </param>
            <param name="value">
            Этот метод возвращает значение, связанное с указанным ключом, если он найден;
            в противном случае — значение по умолчанию для данного типа параметра.
            </param>
        </member>
        <member name="M:Bars.B4.Utils.DynamicDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Добавление элемента в коллекцию.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Bars.B4.Utils.DynamicDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Проверка на содержание словарем пары ключ-значение.
            Пары с иерархическим ключом не ищет (см. методы GetValue и SetValue).
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Удаляет элемент.
            </summary>
            <returns>
            Значение true, если элемент успешно удален, в противном случае — значение false.
            Этот метод также возвращает значение false, если элемент не найден в исходном объекте.
            </returns>
            <param name="item"></param>
        </member>
        <member name="P:Bars.B4.Utils.DynamicDictionary.Container">
            <summary>
            Внутренний контейнер.
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.DynamicDictionary.AsDynamic">
            <summary>
            Возвращает динамический словарь как dynamic. 
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.DynamicDictionary.Item(System.Int32)">
            <summary>
            Индексатор динамического словаря.
            Для отрицательных индексов возвращает самый первый элемент. 
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:Bars.B4.Utils.DynamicDictionary.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            Получает или задает элемент с указанным ключом.
            C составными ключами не работает (см. методы GetValue и SetValue).
            </summary>
            <returns>
            Элемент с указанным ключом.
            </returns>
            <param name="key">Ключ элемента, который требуется получить или задать.</param>
        </member>
        <member name="P:Bars.B4.Utils.DynamicDictionary.System#Collections#IDictionary#Keys">
            <summary>
            Возвращает ключи объекта.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="P:Bars.B4.Utils.DynamicDictionary.Item(System.String)">
            <summary>
            Получает или задает элемент с указанным ключом.
            Получение отрабатывает через метод GetValue.
            set-часть с составными ключами не работает.
            </summary>
            <returns>
            Элемент с указанным ключом.
            </returns>
            <param name="key">Ключ элемента, который требуется получить или задать.</param>
        </member>
        <member name="T:Bars.B4.Utils.DynamicDictionaryJsonConverter">
            <summary>
            Класс, содержащий методы конвертирования DynamicDictionary в json и обратно.
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.DynamicDiscriminator">
            <summary>
            Описание дискриминатора
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.DynamicDiscriminator.PropertyPath">
            <summary>
            Полный путь свойства
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.DynamicDiscriminator.PropertyType">
            <summary>
            Тип свойства
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.DynamicDiscriminator.DisciminatorValue">
            <summary>
            Значение дискриминатора
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.DynamicDiscriminator.Constructor">
            <summary>
            Выражение, используемое для конструирования элемента
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.DynamicDiscriminator.Extractor">
            <summary>
            Выражение, используемое для получения значения дискриминатора
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.DynamicOperation">
            <summary>
            Операция, производимая с динамическим словарем
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.DynamicOperation.PutToCache(System.Object,System.String)">
            <summary>
            Созранение значения в кеше
            </summary>
            <param name="value">Значение</param>
            <param name="storedKey">Ключ. Если не задан, будет сгенерировано новое значение</param>
            <returns>Ключ, по которому можно получить значение из кеша</returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicOperation.GetCacheKey(System.Object)">
            <summary>
            Получение ключа кеша по значению
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicOperation.GetFromCache(System.String)">
            <summary>
            Получение элемента из кеша по ключу
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicOperation.CacheContains(System.String)">
            <summary>
            Проверка, содержит ли кеш значение по ключу
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicOperation.Discriminator``1(System.Object,System.Linq.Expressions.Expression{System.Func{Bars.B4.Utils.DynamicOperationContext,System.Object}})">
            <summary>
            Указывает что для типа TType необходимо использовать определенный конструктор
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="value"></param>
            <param name="ctor"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicOperation.Discriminator``1(System.String,System.Object)">
            <summary>
            Указывает что для свойства необходимо использовать дискриминатор
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="property"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicOperation.UsingType(System.Type)">
            <summary>
            Указывает что необходимо использовать данный тип
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicOperation.UsingContainer(Bars.B4.Utils.DynamicDictionary)">
            <summary>
            Установка контейнера операции
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:Bars.B4.Utils.DynamicOperation.UsingInstance(System.Object)">
            <summary>
            Установка экземпляра класса <see cref="P:Bars.B4.Utils.DynamicOperation.Type"/> с которым производится операция
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicOperation.SkipProperty(System.String[])">
            <summary>
            Указывает что свойство необходимо игнорировать
            </summary>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicOperation.UsingOperator(System.String,Bars.B4.Utils.IDynamicOperator)">
            <summary>
            Указывает что для свойства необходимо использовать оператор
            </summary>        
            <param name="property"></param>
            <param name="operator"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicOperation.UsingOperator(Bars.B4.Utils.IDynamicOperator)">
            <summary>
            Указывает на необходимость использования операторов вне контекста обработки свойств
            </summary>
            <param name="operator"></param>
            <returns></returns>
        </member>
        <member name="P:Bars.B4.Utils.DynamicOperation.Type">
            <summary>
            Тип объекта, значениями которого будем оперировать
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.DynamicOperation.Container">
            <summary>
            Контейнер
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.DynamicOperation.ReferenceCache">
            <summary>
            Кеш ссылок
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.DynamicOperation.ReferenceCacheInverse">
            <summary>
            Кеш ссылок (инверсный индекс)
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.DynamicOperation.Instance">
            <summary>
            Экземпляр класса, с которым производится операция
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.DynamicOperation.SkipProperties">
            <summary>
            Своства объекта <see cref="P:Bars.B4.Utils.DynamicOperation.Instance"/> которые необходимо пропустить
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.DynamicOperation.PropertyOperators">
            <summary>
            Операторы, срабатывающие пи обработке свойства
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.DynamicOperation.Discriminators">
            <summary>
            Дискриминаторы свойств и объектв, 
            позволяющие сериализовать/десериализовать конкретные классы приведенные к одному типу
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.DynamicOperation`2">
            <summary>
            Операция, производимая с динамическим словарем
            </summary>
            <typeparam name="T">Тип наследника</typeparam>
            <typeparam name="TResult">Тип результата</typeparam>
        </member>
        <member name="M:Bars.B4.Utils.DynamicOperation`2.UsingType(System.Type)">
            <summary>
            Указывает что необходимо использовать данный тип
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicOperation`2.UsingContainer(Bars.B4.Utils.DynamicDictionary)">
            <summary>
            Установка контейнера операции
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:Bars.B4.Utils.DynamicOperation`2.UsingInstance(System.Object)">
            <summary>
            Установка экземпляра класса <see cref="T:System.Type"/> с которым производится операция
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicOperation`2.SkipProperty(System.String[])">
            <summary>
            Указывает что свойство необходимо игнорировать
            </summary>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicOperation`2.UsingOperator(System.String,Bars.B4.Utils.IDynamicOperator)">
            <summary>
            Указывает что для свойства необходимо использовать оператор
            </summary>        
            <param name="property"></param>
            <param name="operator"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicOperation`2.UsingOperator(Bars.B4.Utils.IDynamicOperator)">
            <summary>
            Указывает на необходимость использования операторов вне контекста обработки свойств
            </summary>
            <param name="operator"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicOperation`2.Discriminator``1(System.Object,System.Linq.Expressions.Expression{System.Func{Bars.B4.Utils.DynamicOperationContext,System.Object}})">
            <summary>
            Указывает что для типа TType необходимо использовать определенный конструктор
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="value"></param>
            <param name="ctor"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicOperation`2.Discriminator``1(System.String,System.Object)">
            <summary>
            Указывает что для свойства необходимо использовать дискриминатор
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="property"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicOperation`2.Execute">
            <summary>
            Выполнение операции
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bars.B4.Utils.DynamicOperation`2.Me">
            <summary>
            ССылка на текущую операцию
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.DynamicOperation`3">
            <summary>
            Операция, производимая с динамическим словарем
            </summary>
            <typeparam name="T">Тип наследника</typeparam>
            <typeparam name="TClass">Тип аргумента</typeparam>
            <typeparam name="TResult">Тип результата</typeparam>
        </member>
        <member name="M:Bars.B4.Utils.DynamicOperation`3.SkipProperty(System.Linq.Expressions.Expression{System.Func{`1,System.Object}}[])">
            <summary>
            Указывает что свойство необходимо пропустить
            </summary>        
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicOperation`3.UsingOperator(System.Linq.Expressions.Expression{System.Func{`1,System.Object}},Bars.B4.Utils.IDynamicOperator)">
            <summary>
            Указывает что для свойства необходимо использовать оператор
            </summary>        
            <param name="property"></param>
            <param name="operator"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicOperation`3.Discriminator``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Object)">
            <summary>
            Указывает что для свойства необходимо использовать дискриминатор
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="property"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Bars.B4.Utils.DynamicOperationContext">
            <summary>
            Контекст текущей операции чтения/записи <see cref="T:Bars.B4.Utils.DynamicDictionary"/>
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.DynamicOperationContext.Path">
            <summary>
            Текущий путь
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.DynamicOperationContext.Value">
            <summary>
            Текущее значение
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.DynamicOperationContext.Container">
            <summary>
            Контейнер
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.DynamicOperationContext.Type">
            <summary>
            Тип свойства
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.DynamicOperationContext.Key">
            <summary>
            Ключ (наименование свойства)
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.DynamicOperationContext.Continue">
            <summary>
            Флаг продолжения операции
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.DynamicOperationContext`1.Value">
            <summary>
            Текущее значение
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.DynamicOperationType">
            <summary>
            Тип операции
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.DynamicOperationType.Read">
            <summary>
            Чтение
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.DynamicOperationType.Write">
            <summary>
            Запись
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.DynamicRead`1">
            <summary>
            Операция чтения значения из контейнера
            </summary>
            <typeparam name="TClass"></typeparam>
        </member>
        <member name="M:Bars.B4.Utils.DynamicRead`1.SetIgnoreCase(System.Boolean)">
            <summary>
            Указывает что необходимо не учитывать регистр кючей при чтении
            </summary>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicRead`1.CreateUsing(System.Linq.Expressions.Expression{System.Func{Bars.B4.Utils.DynamicDictionary,`0}})">
            <summary>
            Указывает конструктор с помощью которого будет создан корневой объект
            </summary>
            <param name="ctor"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicRead`1.ReadInstance(System.Object,Bars.B4.Utils.DynamicDictionary,System.String)">
            <summary>
            Чтение экземпляра из словаря
            </summary>
            <param name="instance"></param>
            <param name="container"></param>
            <param name="path"></param>
        </member>
        <member name="M:Bars.B4.Utils.DynamicRead`1.ReadProperty(System.Object,System.Reflection.PropertyInfo,System.String,Bars.B4.Utils.DynamicDictionary)">
            <summary>
            Чтение свойства
            </summary>
            <param name="instance"></param>
            <param name="property"></param>
            <param name="path"></param>
            <param name="container"></param>
        </member>
        <member name="M:Bars.B4.Utils.DynamicRead`1.ReadFromDynamicContext(Bars.B4.Utils.DynamicOperationContext)">
            <summary>
            Чтение из контекста
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Bars.B4.Utils.DynamicRead`1.SetPropertyValue(System.Object,System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            Устанвка значения свойства
            </summary>
            <param name="instance"></param>
            <param name="property"></param>
            <param name="currentValue"></param>
            <param name="propertyValue"></param>
        </member>
        <member name="M:Bars.B4.Utils.DynamicRead`1.Execute">
            <summary>
            Выполнение операции
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bars.B4.Utils.DynamicRead`1.IgnoreCase">
            <summary>
            Игнорировать регистр символов при получении ключей
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.DynamicRead`1.TypeNameKey">
            <summary>
            Наименование свойства в контейнере, отвечающее за хранение наименования типа.
            По-умолчанию <see cref="F:Bars.B4.Utils.DynamicOperation.TypeKey"/>
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.DynamicWrite`1">
            <summary>
            Операци записи объекта в контейнер
            </summary>
            <typeparam name="TClass"></typeparam>
        </member>
        <member name="M:Bars.B4.Utils.DynamicWrite`1.MemberWriter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{Bars.B4.Utils.DynamicOperationContext{``0}})">
            <summary>
            Сохранение записывающего действия
            </summary>
            <typeparam name="TVal"></typeparam>
            <param name="member"></param>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicWrite`1.Execute">
            <summary>
            Выполнение операции
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.DynamicWrite`1.WriteInstance(System.Object,Bars.B4.Utils.DynamicDictionary,System.String)">
            <summary>
            Запись экземпляра в контейнер
            </summary>
            <param name="instance"></param>
            <param name="container"></param>
            <param name="path"></param>
        </member>
        <member name="M:Bars.B4.Utils.DynamicWrite`1.WriteProperty(System.Object,System.Reflection.PropertyInfo,System.String,Bars.B4.Utils.DynamicDictionary)">
            <summary>
            Запись значения свойства в контейнер
            </summary>
            <param name="instance"></param>
            <param name="property"></param>
            <param name="path"></param>
            <param name="container"></param>
        </member>
        <member name="P:Bars.B4.Utils.DynamicWrite`1.Writers">
            <summary>
            Словарь действий, выполняемых для записи каждого свойства.
            В качестве ключа используется полный путь свойства,
            в качестве значения - делегат, производящий запись в контейнер
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.DynamicWrite`1.CollectionWriters">
            <summary>
            Словарь действий, выполняемых для записи элементов коллекции.
            В качестве ключа используется полный путь до свойства-коллекции;
            в качестве значения - делегат, производящий запись в контейнер
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.DynamicWrite`1.AutoTypeHandling">
            <summary>
            Автоматическая запись типа сериализуемого значения.
            Если включен (true), то обработка дискриминатора не происходит
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.IDynamicOperator">
            <summary>
            Интерфейс элемента, производящего операции чтения записи в <see cref="T:Bars.B4.Utils.DynamicDictionary"/>
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.IDynamicOperator.Write(Bars.B4.Utils.DynamicOperationContext)">
            <summary>
            Запись контекста
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Bars.B4.Utils.IDynamicOperator.Read(Bars.B4.Utils.DynamicOperationContext)">
            <summary>
            Чтение контекста
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.IDynamicOperator.CanOperate(Bars.B4.Utils.DynamicOperationType,Bars.B4.Utils.DynamicOperationContext)">
            <summary>
            Проверка возможности операции
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Bars.B4.Utils.ToDateTimeExtension">
            <summary>
            Класс, содержащий методы для работы с DateTime.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.ToDateTimeExtension.ToDateTime(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Конвертирование объекта в DateTime.
            Если не удалось, то возвращается DateTime.MinValue.
            </summary>
            <param name="obj"></param>
            <param name="ci"></param>
            <returns></returns>
        </member>
        <member name="T:Bars.B4.Utils.EnumExtensions">
            <summary>
            Класс, содержащий методы расширения перечислений.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.EnumExtensions.ToDynamicDictionary(System.Type)">
            <summary>
            Преобразует тип-перечисление в динамический словарь.
            </summary>
            <param name="type"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            Переданый тип не является перечислением.
            </exception>
        </member>
        <member name="M:Bars.B4.Utils.EnumExtensions.ToDynamicDictionary``1(``0)">
            <summary>
            Преобразует тип-перечисление в динамический словарь.
            </summary>
            <param name="enumType"></param>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Bars.B4.Utils.IEnumMemberView.Name">
            <summary>
            Имя.
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.IEnumMemberView.Value">
            <summary>
            Значение.
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.IEnumMemberView.Display">
            <summary>
            Отображаемое значение.
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.IEnumMemberView.Description">
            <summary>
            Описание.
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.ExceptionHelper">
            <summary>
            Расширения для исключений.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.ExceptionHelper.Throw``1">
            <summary>
            Выбрасывает исключение заданного типа.
            Если не удалось, выбрасывается InvalidOperationException.
            </summary>
            <typeparam name="T">
             Тип исключения.
            </typeparam>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Bars.B4.Utils.ExceptionHelper.Throw``1(System.String,System.Object[])">
            <summary>
            Выбрасывает исключение заданного типа.
            Если не удалось, выбрасывается InvalidOperationException.
            </summary>
            <param name="format">
            Строка форматирования сообщения.
            </param>
            <param name="parameters">
            Параметры, подставляемые в строку форматирования.
            </param>
            <typeparam name="T">
            Тип исключения.
            </typeparam>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Bars.B4.Utils.ExceptionHelper.Throw``1(System.Exception,System.String,System.Object[])">
            <summary>
            Выбрасывает исключение заданного типа (с внутренним исключением).
            Если не удалось, выбрасывается InvalidOperationException (с внутренним исключением).
            </summary>
            <param name="innerException">
            Внутреннее исключение.
            </param>
            <param name="format">
            Строка форматирования сообщения.
            </param>
            <param name="parameters">
            Параметры, подставляемые в строку форматирования.
            </param>
            <typeparam name="T">
            Тип исключения.
            </typeparam>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Bars.B4.Utils.ExceptionHelper.Throw(System.Exception)">
            <summary>
            Выбрасывает исключение.
            </summary>
            <param name="exception">
            Исключение.
            </param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:Bars.B4.Utils.DecimalExtension">
            <summary>
            Класс, содержащий методы расширения типа decimal.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.DecimalExtension.IntegerPart(System.Decimal)">
            <summary>
            Возвращает целую часть числа
            </summary>
            <param name="value">
            Число 
            </param>
            <returns>
            Целая часть числа 
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.DecimalExtension.Mantissa(System.Decimal)">
            <summary>
            Возвращает дробную часть числа
            </summary>
            <param name="value">
            Число 
            </param>
            <returns>
            Дробная часть числа 
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.DecimalExtension.RoundDecimal(System.Decimal,System.Int32)">
            <summary>
            Округлить число до указанного кол-ва знаков
            </summary>
            <param name="value">
            Число 
            </param>
            <param name="decimals">
            Кол-во знаков после запятой 
            </param>
            <returns>
            Округленное число 
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.DecimalExtension.RoundDecimal(System.Decimal)">
            <summary>
            Округлить число до целого
            </summary>
            <param name="value">
            Число 
            </param>
            <returns>
            Округленное число 
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.DecimalExtension.ToFormatedString(System.Decimal,System.Char)">
            <summary>
            Форматировать число в строку.
            </summary>
            <param name="value">
            </param>
            <param name="splitter">
            Символ, на который меняется запятая. 
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:Bars.B4.Utils.EnumerableExtension">
            <summary>
            Класс, содержащий методы расширения перечислимых типов.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.EnumerableExtension.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Выполнение действия для каждого элемента коллекции.
            </summary>
            <typeparam name="T">Тип элемента коллекции.</typeparam>
            <param name="enumeration">Коллекция, элементы которой необходимо обработать.</param>
            <param name="action">Действие, выполняемое для каждого элемента.</param>
        </member>
        <member name="M:Bars.B4.Utils.EnumerableExtension.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Выполнение действия для каждого элемента коллекции.
            </summary>
            <typeparam name="T">Тип элемента коллекции.</typeparam>
            <param name="enumeration">Коллекция, элементы которой необходимо обработать.</param>
            <param name="action">Действие, выполняемое для каждого элемента. В качестве аргументов передаются элемент коллекции и его индекс.</param>    
        </member>
        <member name="M:Bars.B4.Utils.EnumerableExtension.Get``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Получение элемента словаря. Если элемент отсутствует, возвращается значение по умолчанию.
            </summary>
            <param name="dictionary">Словарь.</param>
            <param name="key">Ключ элемента.</param>
            <param name="defValue">Значение по умолчанию.</param>
            <typeparam name="TKey">Тип ключа.</typeparam>
            <typeparam name="TValue">Тип значения.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.EnumerableExtension.Get``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},``0,``1)">
            <summary>
            Получение элемента из списка, содержащего KeyValuePair.
            Если элемент отсутствует, то возвращается значение по умолчанию.
            </summary>
            <param name="dictionary">Список, содержащий KeyValuePair.</param>
            <param name="key">Ключ элемента.</param>
            <param name="defValue">Значение по умолчанию.</param>
            <typeparam name="TKey">Тип ключа.</typeparam>
            <typeparam name="TValue">Тип значения.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.EnumerableExtension.GetOrCreate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Linq.Expressions.Expression{System.Func{``1}})">
            <summary>
            Получение элемента словаря. Если элемент отсутствует, 
            вызывается выражение для создания элемента и новый элемент помещается в словарь.
            </summary>
            <param name="dictionary">Словарь.</param>
            <param name="key">Ключ</param>
            <param name="expression">Выражение, создающее отсутствующий элемент.</param>
            <typeparam name="TKey">Тип ключа.</typeparam>
            <typeparam name="TValue">Тип значения.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.EnumerableExtension.GetOrCreate``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Получение элемента словаря. Если элемент отсутствует или его не удалось конвертировать, 
            то вызывается выражение для создания элемента и новый элемент помещается в словарь.
            
            </summary>
            <param name="dictionary">Словарь.</param>
            <param name="key">Ключ.</param>
            <param name="expression">Выражение, создающее отсутствующий элемент.</param>
            <typeparam name="T">Тип возвращаемого значения.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.EnumerableExtension.GetOrCreate``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Получение элемента словаря. Если элемент отсутствует, 
            создается новый элемент и помещается в словарь.
            </summary>
            <param name="dictionary">Словарь.</param>
            <param name="key">Ключ.</param>
            <typeparam name="T">Тип элемента. Должен быть ссылочным типом и иметь конструктор по умолчанию.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.EnumerableExtension.Set``1(System.Collections.Generic.IDictionary{System.String,``0},System.String,``0)">
            <summary>
            Установка значения словаря.
            Значение устанавливается через индексатор, соответственно если элемент
            с заданным ключом уже присутствует, он будет заменен.
            </summary>
            <param name="dictionary">Словарь.</param>
            <param name="key">Ключ.</param>
            <param name="value">Значение.</param>
            <typeparam name="T">Тип значения словаря.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.EnumerableExtension.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Является ли коллекция "пустой".
            Коллекция считается пустой, если она не имеет элементов, либо если она равна null.
            </summary>
            <param name="collection">Коллекция.</param>
            <typeparam name="T">Тип элемента коллекции.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.EnumerableExtension.IsNotEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Является ли коллекция "не пустой".
            Коллекция считается не пустой, если она не равна null и содержит элементы.
            </summary>
            <param name="collection">Коллекция.</param>
            <typeparam name="T">Тип элемента коллекции.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.EnumerableExtension.Apply``3(``0,System.Collections.Generic.IDictionary{``1,``2})">
            <summary>
            Объединение словарей. Копирование всех значений из словаря-источника в словарь-приемник.
            Если словарь-приемник уже содержит значение с ключом словаря-источника, значение будет заменено.
            </summary>
            <param name="target">Целевой словарь.</param>
            <param name="source">Источник.</param>
            <typeparam name="TDictionary">Тип словаря</typeparam>
            <typeparam name="TKey">Тип ключа</typeparam>
            <typeparam name="TValue">Тип значения</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.EnumerableExtension.Apply``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Объединение словарей. Копирование всех значений из словаря-источника в словарь-приемник.
            Если словарь-приемник уже содержит значение с ключом словаря-источника, значение будет заменено.
            </summary>
            <param name="target">Целевой словарь.</param>
            <param name="source">Источник.</param>
            <typeparam name="TKey">Тип ключа.</typeparam>
            <typeparam name="TValue">Тип значения.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.EnumerableExtension.ApplyIf``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Объединение словарей. Копирование всех значений из словаря-источника в словарь-приемник.
            Если словарь-приемник уже содержит значение с ключом словаря-источника, значение будет пропущено.
            </summary>
            <param name="target">Целевой словарь.</param>
            <param name="source">Источник.</param>
            <typeparam name="TKey">Тип ключа.</typeparam>
            <typeparam name="TValue">Тип значения.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.EnumerableExtension.Get``3(System.Collections.Generic.IDictionary{``0,``1},``0,``2)">
            <summary>
            Получение значения словаря и приведение его к целевому типу.
            </summary>
            <param name="dictionary">Словарь.</param>
            <param name="key">Ключ.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <typeparam name="TKey">Тип ключа.</typeparam>
            <typeparam name="TValue">Тип значения.</typeparam>
            <typeparam name="TResult">Тип результата.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.EnumerableExtension.Get``1(System.Collections.Generic.IDictionary{System.String,System.String},System.String,``0)">
            <summary>
            Получение значения словаря и приведение его к целевому типу.
            </summary>
            <param name="dictionary">Словарь.</param>
            <param name="key">Ключ.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <typeparam name="TResult">Тип результата.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.EnumerableExtension.AddTo``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Добавление всех элементов коллекции в другую коллекцию
            </summary>
            <param name="enumeration">Источник</param>
            <param name="collection">Приемник</param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Bars.B4.Utils.EnumerableExtension.AddTo``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{``0})">
            <summary>
            Добавление всех элементов коллекции в список
            </summary>
            <param name="enumeration">Источник</param>
            <param name="collection">Приемник</param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Bars.B4.Utils.EnumerableExtension.Distinct``2(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Возвращает различающиеся элементы последовательности, используя для сравнения значений компаратор,
            получаемый из выражения.
            </summary>
            <param name="query">
            Последовательность.
            </param>
            <param name="memberExpression">
            Выражение, из которого с помощью метода Member класса FnEqualityComparer создается компаратор.
            </param>
            <typeparam name="T"></typeparam>
            <typeparam name="V"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.EnumerableExtension.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Возвращает различающиеся элементы последовательности, используя для сравнения значений компаратор,
            получаемый из делегата.
            </summary>
            <param name="query">
            Последовательность.
            </param>
            <param name="fn">
            Делегат, из которого с помощью метода Fn класса FnEqualityComparer создается компаратор.
            </param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.EnumerableExtension.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            Фильтрует последовательность по предикату при выполнении условия.
            Выбрасывает исключение для null-предиката.
            Если условие не выполняется, то возвращает исходную последовательность.
            </summary>
            <typeparam name="T">Тип последовательности.</typeparam>
            <param name="source">Последовательность элементов.</param>
            <param name="condition">Условие.</param>
            <param name="predicate">Предикат.</param>
            <returns>Отфильтрованная последовательность.</returns>
        </member>
        <member name="M:Bars.B4.Utils.EnumerableExtension.Chunk``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>Получить часть списка</summary>
            <typeparam name="T">Тип элемента</typeparam>
            <param name="list">Список элементов</param>
            <param name="chunkSize">Размер части</param>
            <returns>Часть списка</returns>
        </member>
        <member name="T:Bars.B4.Utils.FnEqualityComparer`1">
            <summary>
            Класс для создания компараторов из соответствующих делегатов и выражений. 
            Не используйте этот компаратор для хеш-таблиц (GetHashCode всегда возвращает 0).
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Bars.B4.Utils.FnEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Сравнивает объекты.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.FnEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Не использовать.
            </summary>
            <param name="obj"></param>
            <returns>Всегда 0.</returns>
        </member>
        <member name="M:Bars.B4.Utils.FnEqualityComparer`1.Fn(System.Func{`0,`0,System.Boolean})">
            <summary>
            Создает компаратор из делегата.
            </summary>
            <param name="equalFn">
            Функция, принимающая два параметра типа T и возвращающая bool. 
            </param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.FnEqualityComparer`1.Member``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Создает компаратор из выражения.
            Можно использовать только выражения вида item => item.Xxx,
            где Xxx - поле или свойство объекта.
            </summary>
            <param name="memberExp">
            Выражение. 
            </param>
            <typeparam name="V"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Bars.B4.Utils.MemberNameGet">
            <summary>
            Тип получения полного имени свойства.
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.MemberNameGet.Last">
            <summary>
            Имя последнего свойства в выражении.
            Например для выражения x => x.Object.Id
            будет возвращен Id
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.MemberNameGet.Concat">
            <summary>
            Склейка имен свойств в выражении.
            Например для выражения x => x.Object.Id
            будет возвращен ObjectId
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.MemberNameGet.Dotted">
            <summary>
            Склейка имен свойств в выражении с разделителем.
            Например для выражения x => x.Object.Id
            будет возвращен Object.Id
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.ObjectExtensions">
            <summary>
            Общие методы расширения, применимые к большинству типов.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.ObjectExtensions.Is(System.Object,System.Type)">
            <summary>
            Проверяет является ли переданный объект экземпляром указанного типа
            или экземпляром наследника этого типа.
            </summary>
            <param name="instance">Проверяемый экземпляр.</param>
            <param name="type">Ожидаемый тип экземпляра.</param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.ObjectExtensions.Is``1(System.Object)">
            <summary>
            Проверяет является ли переданный объект экземпляром указанного типа
            или экземпляром наследника этого типа.
            </summary>
            <param name="instance">Проверяемый экземпляр.</param>
            <typeparam name="T">Ожидаемый тип экземпляра.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.ObjectExtensions.IsNot``1(System.Object)">
            <summary>
            Проверяет является ли переданный объект экземпляром указанного типа
            или экземпляром наследника этого типа.
            </summary>
            <param name="instance">Проверяемый экземпляр.</param>
            <typeparam name="T">Проверяемый тип.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.ObjectExtensions.As``1(System.Object)">
            <summary>
            Приводит переданный экземпляр к определенному типу.
            В случае, если экземпляр не приводится к этому типу, будет возвращено значение по умолчанию.
            </summary>
            <param name="instance">Экземпляр, который необходимо привести к целевому типу.</param>
            <typeparam name="T">Целевой тип.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.ObjectExtensions.CastAs``1(System.Object)">
            <summary>
            Приводит переданный экземпляр к определенному типу.
            В случае, если экземпляр не приводится к этому типу, будет сгенерировано исключение.
            Обертка на стандартную операцию приведения типа.
            </summary>
            <param name="instance">Экземпляр, который необходимо привести к целевому типу.</param>
            <typeparam name="T">Целевой тип.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.ObjectExtensions.ToInvariantString``1(``0,System.String)">
            <summary>
            Конвертация значения в строку инвариантной культуры с указанием формата. 
            Если формат указан в виде "C2", то он преобразуется в "{0:C2}". 
            Формат в виде "{0:C2}" допустим, формат в виде "0:C2" недопустим. 
            </summary>
            <param name="instance">Экземляр, который необходимо перевести в строку.</param>
            <param name="format">Формат.</param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.ObjectExtensions.ToLowerInvariantString``1(``0,System.String)">
            <summary>
            Конвертация значения в строку инвариантной культуры с указанием формата и приведением к нижнему регистру.    
            Если формат указан в виде "C2", то он преобразуется в "{0:C2}". 
            Формат в виде "{0:C2}" допустим, формат в виде "0:C2" недопустим.     
            </summary>
            <param name="instance">Экземляр, который необходимо перевести в строку.</param>
            <param name="format">Формат.</param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.ObjectExtensions.AsNullable``1(``0)">
            <summary>
            Приведение структур к nullable-типу.
            </summary>
            <param name="instance"></param>
            <typeparam name="TInput"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.ObjectExtensions.With``2(``0,System.Func{``0,``1})">
            <summary>
            Вычисление значения из переданного объекта.
            Если объект равен null или возникла ошибка выполнения (в Func), то возвращает null.
            Имеется подобный метод ReturnSafe для возврата ValueType.
            </summary>
            <param name="instance"></param>
            <param name="evaluator"></param>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.ObjectExtensions.Return``2(``0,System.Func{``0,``1},``1)">
            <summary>
            Вычисление значения из переданного объекта.
            Если возникла ошибка выполнения (в Func), то метод выбросит исключение.
            </summary>
            <param name="o">Экземпляр.</param>
            <param name="evaluator">Функция вычисления значения.</param>
            <param name="failureValue">Значение, которое будет возвращено если в качестве экземпляра передан Null.</param>
            <typeparam name="TInput">Тип экземпляра.</typeparam>
            <typeparam name="TResult">Тип результата.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.ObjectExtensions.ReturnFn``2(``0,System.Func{``0,``1},System.Func{``1})">
            <summary>
            Вычисление значения из переданного объекта.
            Если возникла ошибка выполнения (в одном из Func), то метод выбросит исключение.        
            </summary>
            <param name="o">Экземпляр.</param>
            <param name="evaluator">Функция вычисления значения.</param>
            <param name="failureValue">Функция вычисления значения, которое будет возвращено, если в качестве экземпляра передан null.</param>
            <typeparam name="TInput">Тип экземпляра.</typeparam>
            <typeparam name="TResult">Тип результата.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.ObjectExtensions.ReturnSafe``2(``0,System.Func{``0,``1})">
            <summary>
            Аналог <see cref="M:Bars.B4.Utils.ObjectExtensions.Return``2(``0,System.Func{``0,``1},``1)"/>, перехватывающий ошибки.
            Вычисление значения из переданного объекта.
            Если объект равен null или возникла ошибка выполнения (в Func), то возвращает default(TResult).
            </summary>
            <param name="o">Экземпляр.</param>
            <param name="evaluator">Функция вычисления значения.</param>
            <typeparam name="TInput">Тип экземпляра.</typeparam>
            <typeparam name="TResult">Тип результата.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.ObjectExtensions.IsNull``1(``0)">
            <summary>
            Проверяет является ли экземпляр Null.
            </summary>
            <param name="o"></param>
            <typeparam name="TInput"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.ObjectExtensions.IsNotNull``1(``0)">
            <summary>
            Проверяет экземпляр на != Null
            </summary>
            <param name="o"></param>
            <typeparam name="TInput"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.ObjectExtensions.If``1(``0,System.Func{``0,System.Boolean})">
            <summary>
            Выполняет проверку условия на экземляре.
            Возвращает  default(TInput), если проверка вернула false,
            иначе возвращается переданный экземляр.
            Если экземпляр равен null, то возвращает null.
            Если возникла ошибка выполнения (в Func), то метод выбросит исключение.     
            </summary>
            <param name="o">
            Объект.
            </param>
            <param name="evaluator">
            Делегат, представляющий проверяемое условие.
            </param>
            <typeparam name="TInput">
            Тип объекта.
            </typeparam>
            <returns>
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.ObjectExtensions.Do``1(``0,System.Action{``0})">
            <summary>
            Выполнение действия на экземпляре, если экземлпяр не Null.
            Если возникла ошибка выполнения (в Action), то метод выбросит исключение.     
            </summary>
            <param name="o"></param>
            <param name="action"></param>
            <typeparam name="TInput"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.ObjectExtensions.AddTo``1(``0,System.Collections.Generic.IList{``0})">
            <summary>
            Добавление элемента в список, если элемент не null.
            </summary>
            <param name="o">Экземпляр.</param>
            <param name="container">Список.</param>
            <typeparam name="TInput">Тип экземляра.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.ObjectExtensions.ExprBind``2(``0,System.Func{``0,``1})">
            <summary>
            Вычисление значения из переданного объекта.
            Если возникла ошибка выполнения (в Func), то метод выбросит исключение.   
            </summary>
            <param name="value">Экземпляр.</param>
            <param name="fn">Функция вычисления значения.</param>
            <typeparam name="TInput">Тип экземпляра.</typeparam>
            <typeparam name="TReturn">Тип результата.</typeparam>
            <returns></returns>
        </member>
        <member name="T:Bars.B4.Utils.ReflectionExtensions">
            <summary>
            Вспомогательный класс с дополнительными
            методами взаимодействия через рефлексию.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.ReflectionExtensions.MemberInfo``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Получение информации о свойстве.
            </summary>
            <typeparam name="TObject">
            Тип параметра expression'а.
            </typeparam>
            <param name="expression">
            Выражение, используемое для получения имени свойства.
            Например, x => x.City
            </param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.ReflectionExtensions.MemberName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},Bars.B4.Utils.MemberNameGet)">
            <summary>
            Получение имени свойства.
            </summary>
            <typeparam name="TObject">
            Тип параметра expression'а.
            </typeparam>
            <typeparam name="TValue">
            Тип значения expression'а.
            </typeparam>
            <param name="expression">
            Выражение, используемое для получения имени свойства.
            Например, x => x.Company.Address.City
            </param>
            <param name="memberNameGet">
            Тип получения полного имени свойства.
            </param>
            <returns>
            Имя свойства. Например, для указанного expression'а
            вызов MemberName(MemberNameGet.Dotted) вернет строку Company.Address.City.
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.ReflectionExtensions.MemberName``1(System.Linq.Expressions.Expression{System.Func{``0}},Bars.B4.Utils.MemberNameGet)">
            <summary>
            Получение имени свойства.
            </summary>
            <param name="expression">
            Выражение, используемое для получения имени свойства.
            Например, () =&gt; Company.Address.City
            </param>
            <typeparam name="TValue">
            Тип значения expression'а.
            </typeparam>
            <param name="memberNameGet">
            Тип получения полного имени свойства.
            </param>
            <returns>
            Имя свойства. Например, для указанного expression'а
            вызов MemberName() вернет строку City.
            </returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Bars.B4.Utils.StreamExtensions">
            <summary>
            Набор методов-расширений класса <see cref="T:System.IO.Stream"/> и его наследников.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.StreamExtensions.ReadAllBytes(System.IO.Stream)">
            <summary>
            Чтение контента потока в массив байт.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Bars.B4.Utils.StringExtensions">
            <summary>
            Набор методов-расширений для работы со строками.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.StringExtensions.ComputeHash(System.String,System.String)">
            <summary>
            Возвращает MD5-хеш строки в виде base-64 строки.
            Если строка hashMethod пустая (IsEmpty), то метод отработает по дефолтному MD5-алгоритму.
            </summary>
            <param name="str"></param>
            <param name="hashMethod">Имя MD5-алгоритма.</param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.StringExtensions.AsBase64String(System.Byte[])">
            <summary>
            Конвертация массива байт в base64-строку.
            Если исходный массив равен null или пуст, вернет null.
            </summary>
            <param name="array">Исходный массив байт.</param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.StringExtensions.AsString(System.Byte[])">
            <summary>
            Формирование строки на основе массива байт.
            Если исходный массив равен null, вернет null.
            </summary>
            <param name="array">Исходный массив байт.</param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.StringExtensions.ToUtf8Bytes(System.String)">
            <summary>
            Конвертация строки в массив байт, используя кодировку UTF8.
            Если строка равна null, вернет пустой массив.
            </summary>
            <param name="str">Исходная строка.</param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.StringExtensions.Split(System.String,System.StringSplitOptions,System.String[])">
            <summary>
            Разделение строки на подстроки с возможностью указать несколько разделителей.
            Если строка пустая (IsEmpty), то вернет пустой массив.
            </summary>
            <param name="str">Исходная строка.</param>
            <param name="options">Параметры разделения.</param>
            <param name="delimiters">Разделители.</param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.StringExtensions.Split(System.String,System.String[])">
            <summary>
            Разделение строки на подстроки с возможностью указать несколько разделителей.
            Пустые подстроки будут исключены из результата.
            Если строка пустая (IsEmpty), то вернет пустой массив.
            </summary>
            <param name="str">Исходная строка.</param>
            <param name="delimiters">Разделители.</param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.StringExtensions.FormatUsing(System.String,System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Использование текущей строки в качестве шаблона форматирования.
            Если строка пустая (IsEmpty), то вернет null.
            Если набор аргументов равен null и строка непустая (IsNotEmpty), то выбросит ArgumentNullException.
            Если количество подстановок больше количества аргументов, то выбросит FormatException. 
            </summary>
            <param name="format">Строка, используемая в качестве шаблона.</param>
            <param name="culture">Культура, в рамках которой происходит форматирование.</param>
            <param name="args">Набор аргументов.</param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.StringExtensions.FormatUsing(System.String,System.Object[])">
            <summary>
            Использование текущей строки в качестве шаблона форматирования.
            В качестве культуры используется <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            Если строка пустая (IsEmpty), то вернет null.
            Если набор аргументов равен null, то вернет исходную строку.
            Если количество подстановок больше количества аргументов, то выбросит FormatException.
            </summary>
            <param name="format">Строка, используемая в качестве шаблона.</param>
            <param name="args">Набор аргументов.</param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.StringExtensions.IsEmpty(System.String)">
            <summary>
            Проверка строки на НЕ заполненность.
            Вернет <see cref="!:bool.True"/>, если строка не содержит символов, содержит только пробелы, либо равна Null
            </summary>
            <param name="str">Проверяемая строка.</param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.StringExtensions.IsNotEmpty(System.String)">
            <summary>
            Проверка строки на заполненность.
            Вернет <see cref="!:bool.True"/>, если строка не равна null и содержит хотя бы один символ, отличный от пробела
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.StringExtensions.Or(System.String,System.String)">
            <summary>
            Возвращает альтернативное значение строки, если исходная строка пуста, иначе возвращает исходную строку.
            Для проверки на заполненность используется метод <see cref="M:Bars.B4.Utils.StringExtensions.IsEmpty(System.String)"/>
            </summary>
            <param name="str">Исходная строка</param>
            <param name="other">Альтернативная строка</param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.StringExtensions.Or(System.String,System.Func{System.String})">
            <summary>
            Возвращает альтернативное значение строки, если исходная строка пуста, иначе возвращает исходную строку.
            Для проверки на заполненность используется метод <see cref="M:Bars.B4.Utils.StringExtensions.IsEmpty(System.String)"/>.
            Если делегат равен null, то выбрасывает исключение вне зависимости от значения исходной строки. 
            </summary>
            <param name="str">Исходная строка.</param>
            <param name="other">Функция получения альтернативного значения.</param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.StringExtensions.IsOneOf(System.String,System.String[])">
            <summary>
            Проверка строки на вхождение в набор строк.
            Если коллекция равна null или пустая, то вернет false.
            Если строка равна null или пустая или содержит только пробельные символы, то вернет false.
            </summary>
            <param name="str">Исходная строка.</param>
            <param name="list">Набор строк, в котором ищется исходная строка.</param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.StringExtensions.EqualsIgnoreCase(System.String,System.String[])">
            <summary>
            Проверка строки на равенство одной из строк набора без учета регистра.
            Если коллекция равна null или пустая, то вернет false.
            Если строка равна null, выбросит NullReferenceException.
            Если строка пустая, вернет false.
            </summary>
            <param name="str">Исходная строка.</param>
            <param name="value">Набор строк, со строками которого сравнивается исходная строка.</param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.StringExtensions.StartsWithIgnoreCase(System.String,System.String[])">
            <summary>
            Проверяет, начинается ли строка с одной из строк набора без учета регистра.
            </summary>
            <param name="str">Исходная строка.</param>
            <param name="value">Набор строк.</param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.StringExtensions.Append(System.String,System.String,System.String)">
            <summary>
            Добавление подстроки в строку, возможно с использованием разделителя.
            Если <see cref="!:IsEmpty(str)"/> = <see cref="!:bool.True"/>, то возвращается добавляемая подстрока.
            Если исходная строка заканчивается разделителем или/и добавляемая строка начинается с разделителя,
            то разделитель останется в единственном экземпляре, например,
            Append("first_", "_second", "_") вернет строку "first_second".       
            </summary>
            <param name="str">Исходная строка.</param>
            <param name="value">Добавляемая подстрока.</param>
            <param name="delim">Разделитель.</param>
            <returns></returns>
        </member>
        <member name="T:Bars.B4.Utils.TypeExtensions">
            <summary>
            Набор методов-расширений для взаимодействия с типами.
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.TypeExtensions.InvalidMultiPartNameChars">
            <summary>
            Невалидные символы для составных имен (имен видa Part1.Part2.Part3).
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.TypeExtensions.InvalidMemberNameChars">
            <summary>
            Невалидные символы для имен членов (свойств, методов, классов и т.п.).
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.TypeExtensions.GetTypeUid(System.Type)">
            <summary>
            Получение идентификатора типа.
            Формирует идентификатор вида "Полное имя класса, Наименование сборки".
            Причем "Полное имя класса" содержит, в том числе имена родительских классов, если класс вложенный.
            </summary>
            <param name="type">Тип, идентификатор которого необходимо получить.</param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.TypeExtensions.GetTypeName(System.Type)">
            <summary>
            Получение полного имени типа, включая имена родительских типов для nested-элементов.
            </summary>
            <param name="type">
            Тип, для которого необходимо получить наименование.
            </param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.TypeExtensions.Properties(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Получение списка свойств типа по указанным флагам.
            По умолчанию возвращает public-свойства уровня экземпляра.
            Реализован простым вызовом Type.GetProperties.
            </summary>
            <param name="type"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.TypeExtensions.Is(System.Type,System.Type,System.Boolean)">
            <summary>
            Проверяет является ли тип приводимым к другому типу.
            Маркер checkInheritance нерабочий, цепочка наследования проверяется в любом случае.
            В текущем состоянии метод возвращает true, если класс имеет в цепочке наследования класс baseType
            или интерфейс имеет в цепочке наследования интерфейс baseType
            или класс реализует или наследует реализацию интерфейса baseType.
            </summary>
            <param name="type">
            Проверяемый тип.
            </param>
            <param name="baseType">
            Предполагаемый базовый тип.
            </param>
            <param name="checkInheritance">
            Проверять цепочку наследования.
            </param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.TypeExtensions.Is``1(System.Type,System.Boolean)">
            <summary>
            Проверяет является ли тип приводимым к другому типу.
            Маркер checkInheritance нерабочий, цепочка наследования проверяется в любом случае.
            В текущем состоянии метод возвращает true, если класс имеет в цепочке наследования класс baseType
            или интерфейс имеет в цепочке наследования интерфейс baseType
            или класс реализует или наследует реализацию интерфейса baseType.
            </summary>
            <param name="type">
            Проверяемый тип.
            </param>
            <param name="checkInheritance">
            Проверять цепочку наследования.
            </param>
            <typeparam name="TType">
            Предполагаемый базовый тип.
            </typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.TypeExtensions.IsNot``1(System.Type,System.Boolean)">
            <summary>
            Проверяет, не является ли тип приводимым к другому типу
            </summary>
            <param name="type">Проверяемый тип</param>
            <param name="checkInheritance">Проверять цепочу наследования</param>
            <typeparam name="T">Предполагаемый базовый тип</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.TypeExtensions.IsEnumerable(System.Type)">
            <summary>
            Проверяет, является ли тип реализацией интерфейса IEnumerable.
            </summary>
            <param name="type">Проверяемый тип.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bars.B4.Utils.TypeExtensions.IsEnumerable``1(System.Type)" -->
        <member name="M:Bars.B4.Utils.TypeExtensions.IsNullable(System.Type)">
            <summary>
            Проверяет является ли тип Nullable
            </summary>
            <param name="type">Проверяемый тип</param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.TypeExtensions.InheritanceLevel(System.Type)">
            <summary>
            Возвращает уровень типа в цепочке наследования.
            Для null вернет Int32.MaxValue.
            Для интерфейсов всегда возвращает 0.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.TypeExtensions.GetAttributes``1(System.Reflection.ICustomAttributeProvider,System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            Получение набора атрибутов. 
            </summary>
            <param name="type">
            Контейнер атрибутов.
            </param>
            <param name="inherit">
            Проверять цепочку наследования.
            </param>
            <param name="selector">
            Предикат для применения дополнительных условий выбора.
            </param>
            <typeparam name="T">Тип атрибута</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.TypeExtensions.GetAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            Получение атрибута.
            </summary>
            <param name="type">Контейнер атрибутов.</param>
            <param name="inherit">Проверять цепочку наследования.</param>
            <param name="selector">Предикат для применения дополнительных условий выбора.</param>
            <typeparam name="T">Тип атрибута.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.TypeExtensions.GetDisplayName(System.Reflection.ICustomAttributeProvider,System.String)">
            <summary>
            Получение отображаемого имени контейнера атрибутов.
            Выполняет поиск атрибутов <see cref="T:Bars.B4.Utils.DisplayAttribute"/> и <see cref="T:System.ComponentModel.DisplayNameAttribute"/>.
            </summary>
            <param name="type">Контейнер атрибутов.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.TypeExtensions.HasAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            Проверяет наличие атрибута в контейнере.
            </summary>
            <param name="type">Контейнер атрибутов.</param>
            <param name="inherit">Проверять цепочку наследования.</param>
            <param name="selector">Предикат для применения дополнительных условий выбора.</param>
            <typeparam name="T">Тип атрибута.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.TypeExtensions.HasNoAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            Проверяет отсутствие атрибута в контейнере.
            </summary>
            <param name="type">Контейнер атрибутов.</param>
            <param name="inherit">Проверять цепочку наследования.</param>
            <param name="selector">Предикат для применения дополнительных условий выбора.</param>
            <typeparam name="T">Тип атрибута.</typeparam>
            <returns></returns>
        </member>
        <member name="T:Bars.B4.Utils.GraphUtil">
            <summary>
            Класс, содержащий методы расширения для работы с графами.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.GraphUtil.IsGraphCyclic(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Проверяет, является ли граф циклическим.
            </summary>
            <param name="edges">Направленные ребра графа. Для каждой вершины указано множество вершин, в которые исходят ребра</param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.GraphUtil.IsGraphCyclic(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}},System.String@)">
            <summary>
            Проверяет, является ли граф циклическим.
            </summary>
            <param name="edges">Направленные ребра графа. Для каждой вершины указано множество вершин, в которые исходят ребра</param>
            <param name="cycleNode">Выходная переменная, в которую записывается вершина, входящая в цикл</param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.GraphUtil.TopologicalSort(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Вычисляет топологическую сортировку графа.
            </summary>
            <param name="edges">Направленные ребра графа. Для каждой вершины указано множество вершин, в которые исходят ребра.</param>
            <returns>Список вершин в порядке, соответствующем топологической сортировке</returns>
        </member>
        <member name="T:Bars.B4.Utils.ImageUtils">
            <summary>
            The image utils.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.ImageUtils.CompressImage(System.IO.Stream)">
            <summary>
            The compress image.
            </summary>
            <param name="imageStream">
            The image stream. 
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:Bars.B4.Utils.ObjectParseExtention">
            <summary>
            Набор методов-расширений для распарсивания объектов.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.ObjectParseExtention.To``1(System.Object)">
            <summary>
            Приводит <paramref name="obj"/> к типу <typeparamref name="T"/>.
            Если не удалось, то возвращается default(<typeparamref name="T"/>).
            </summary>
            <typeparam name="T">
            Тип, к которому приводится объект.
            </typeparam>
            <param name="obj">
            Объект.
            </param>
            <returns>
            Приведенное значение.
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.ObjectParseExtention.To``1(System.Object,``0)">
            <summary>
            Приводит <paramref name="obj"/> к типу <typeparamref name="T"/>.
            Если не удалось, то возвращается <paramref name="defaultValue"/>.
            </summary>
            <typeparam name="T">
            Тип, к которому приводится объект.
            </typeparam>
            <param name="obj">
            Объект.
            </param>
            <param name="defaultValue">
            Дефолтное значение.
            </param>
            <returns>
            Приведенное значение.
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.ObjectParseExtention.ToBool(System.Object)">
            <summary>
            Приводит объект к типу bool.
            Возвращает true для строки "true".
            Возвращает true для целого числа (int, long) отличного от нуля.
            </summary>
            <param name="obj">
            Объект. 
            </param>
            <returns>
            Приведенное значение. 
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.ObjectParseExtention.ToDateTime(System.Object)">
            <summary>
            Приводит объект к типу DateTime.
            Если не удалось, возвращает DateTime.MinValue.
            </summary>
            <param name="obj">
            Объект. 
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.ObjectParseExtention.ToDecimal(System.Object)">
            <summary>
            Приводит объект к типу decimal.
            </summary>
            <param name="obj">
            Объект. 
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.ObjectParseExtention.ToDouble(System.Object)">
            <summary>
            Приводит объект к типу double.
            </summary>
            <param name="obj">
            Объект. 
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.ObjectParseExtention.ToLong(System.Object,System.Int64)">
            <summary>
            Приводит объект к типу long.
            Для true возвращает defaultValue.
            </summary>
            <param name="obj">
            Объект.
            </param>
            <param name="defaultValue">
            Значение, возвращаемое, если не удалось выполнить преобразование. 
            </param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.ObjectParseExtention.ToLong(System.Object)">
            <summary>
            Приводит объект к типу long.
            Для true возвращает 1.
            </summary>
            <param name="obj">
            Объект.
            </param>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.ObjectParseExtention.ToInt(System.Object,System.Int32)">
            <summary>
            Приводит объект к типу int.
            Для true возвращает defaultValue.
            </summary>
            <param name="obj">
            Объект. 
            </param>
            <param name="defaultValue">
            Значение, возвращаемое, если не удалось выполнить преобразование.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.ObjectParseExtention.ToInt(System.Object)">
            <summary>
            Приводит объект к типу int.
            Для true возвращает 1.
            </summary>
            <param name="obj">
            Объект. 
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.ObjectParseExtention.ToStr(System.Object)">
            <summary>
            Приводит объект к типу string.
            Если объект равен null, то возвращает пустую строку.
            </summary>
            <param name="obj">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.ObjectParseExtention.ToEnum``1(System.Object,``0,System.Type)">
            <summary>
            Приведение объекта к типу перечисления.
            Работает, если базовый тип перечисления int
            и объект имеет тип int, long, string или decimal,
            иначе InvalidOperationException.
            </summary>
            <typeparam name="T">Тип, представляющий собой перречисление.</typeparam>
            <param name="obj"></param>
            <param name="defaultValue">Значение, возвращаемое, если преобразование не удалось.</param>
            <param name="type">Тип, лежащий в основе перечисления.
            Если перечисление не Nullable, то тип самого перечисления. 
            </param>
            <returns></returns>
        </member>
        <member name="T:Bars.B4.Utils.HashType">
            <summary>
            The hash type.
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.HashType.MD5">
            <summary>
              The m d 5.
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.HashType.MD5B2">
            <summary>
              The m d 5 b 2.
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.MD5">
            <summary>
            The m d 5.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.MD5.GetHash(System.String)">
            <summary>
            Метод подсчитывает хэш входящей строки и возвращает результат в виде массива байт
            </summary>
            <param name="source">
            The source. 
            </param>
        </member>
        <member name="M:Bars.B4.Utils.MD5.GetHashMD5B2(System.String)">
            <summary>
            Метод подсчитывает хэш по MD5B2 входящей строки и возвращает результат в виде массива байт
            </summary>
            <param name="source">
            The source. 
            </param>
        </member>
        <member name="M:Bars.B4.Utils.MD5.GetHashString(System.String)">
            <summary>
            Вовзращает хэш в стандартном строковом представлении
            </summary>
            <param name="source">
            The source. 
            </param>
            <returns>
            The get hash string. 
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.MD5.GetHashString64(System.String)">
            <summary>
            Возвращает хэш в виде строки, закодированной по базе из 64'х цифр
            </summary>
            <param name="source">
            The source. 
            </param>
            <remarks>
            В таком виде создает хэши паролей Барс.Ядро
            </remarks>
            <returns>
            The get hash string 64. 
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.MD5.GetHashString64(System.String,Bars.B4.Utils.HashType)">
            <summary>
            Возвращает хэш в виде строки, закодированной по базе из 64'х цифр по заданному методу шифрования
            </summary>
            <param name="source">
            The source. 
            </param>
            <param name="hashType">
            The hash Type. 
            </param>
            <remarks>
            В таком виде создает хэши паролей Барс.Ядро
            </remarks>
            <returns>
            The get hash string 64. 
            </returns>
        </member>
        <member name="T:Bars.B4.Utils.IObservableList">
            <summary>
            Интерфейс списка, имеющего возможность отслеживания изменений.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.IObservableList.SuppressEvents">
            <summary>
            Подавить отправку события.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.IObservableList.ResumeEvents">
            <summary>
            Возобновить отправку события.
            </summary>
        </member>
        <member name="E:Bars.B4.Utils.IObservableList.OnChange">
            <summary>
            Событие ассоциированное с добавлением/удалением элементов.
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.IObservableList`1">
            <summary>
            Обобщенный интерфейс списка, имеющего возможность отслеживания изменений.
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.ObservableList`1">
            <summary>
            Класс-наследник <see cref="T:System.Collections.Generic.IList`1"/>, имеющий возможность отслеживания изменений
            с помощью события OnChange.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Bars.B4.Utils.ObservableList`1.RaiseOnChangeEvent">
            <summary>
            Метод отправки события, вызываемый при добавлении/удалении элементов.
            Если в последний раз вызывался метод SuppressEvents, то событие отправляться не будет.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.ObservableList`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Добавляет элемент в список <see cref="T:System.Collections.IList"/>.
            </summary>
            <returns>
            Позиция, в которую вставлен новый элемент, или -1 для обозначения того, что элемент не был помещен в коллекцию.
            </returns>
            <param name="value">Объект, добавляемый в список <see cref="T:System.Collections.IList"/>. </param><exception cref="T:System.NotSupportedException">Объект <see cref="T:System.Collections.IList"/> доступен только для чтения.— или — Коллекция <see cref="T:System.Collections.IList"/> имеет фиксированный размер. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Bars.B4.Utils.ObservableList`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Определяет, содержится ли указанное значение в списке <see cref="T:System.Collections.IList"/>.
            </summary>
            <returns>
            Значение true, если объект <see cref="T:System.Object"/> найден в списке <see cref="T:System.Collections.IList"/>; в противном случае – значение false.
            </returns>
            <param name="value">Объект, который требуется найти в списке <see cref="T:System.Collections.IList"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Bars.B4.Utils.ObservableList`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Определяет индекс заданного элемента в списке <see cref="T:System.Collections.IList"/>.
            </summary>
            <returns>
            Индекс параметра <paramref name="value"/>, если он найден в списке; в противном случае – значение -1.
            </returns>
            <param name="value">Объект, который требуется найти в списке <see cref="T:System.Collections.IList"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Bars.B4.Utils.ObservableList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Вставляет элемент в список <see cref="T:System.Collections.IList"/> по указанному индексу.
            </summary>
            <param name="index">Отсчитываемый от нуля индекс, по которому следует вставить параметр <paramref name="value"/>. </param><param name="value">Объект, вставляемый в список <see cref="T:System.Collections.IList"/>. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> не является допустимым индексом в <see cref="T:System.Collections.IList"/>. </exception><exception cref="T:System.NotSupportedException">Объект <see cref="T:System.Collections.IList"/> доступен только для чтения.— или — Коллекция <see cref="T:System.Collections.IList"/> имеет фиксированный размер. </exception><exception cref="T:System.NullReferenceException">Параметр <paramref name="value"/> является ссылкой со значением null в списке <see cref="T:System.Collections.IList"/>.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Bars.B4.Utils.ObservableList`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Удаляет первое вхождение указанного объекта из списка <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">Объект, который необходимо удалить из списка <see cref="T:System.Collections.IList"/>. </param><exception cref="T:System.NotSupportedException">Объект <see cref="T:System.Collections.IList"/> доступен только для чтения.— или — Коллекция <see cref="T:System.Collections.IList"/> имеет фиксированный размер. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Bars.B4.Utils.ObservableList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Копирует элементы <see cref="T:System.Collections.Generic.ICollection`1"/> в массив <see cref="T:System.Array"/>, начиная с указанного индекса <see cref="T:System.Array"/>.
            </summary>
            <param name="array">Одномерный массив <see cref="T:System.Array"/>, в который копируются элементы из интерфейса <see cref="T:System.Collections.Generic.ICollection`1"/>.Индексация в массиве <see cref="T:System.Array"/> должна начинаться с нуля.</param><param name="arrayIndex">Отсчитываемый от нуля индекс в массиве <paramref name="array"/>, с которого начинается копирование.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> имеет значение null;</exception><exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="arrayIndex"/> меньше 0.</exception><exception cref="T:System.ArgumentException">Параметр <paramref name="array"/> является многомерным— или —Количество элементов в исходной коллекции <see cref="T:System.Collections.Generic.ICollection`1"/> превышает доступное место, начиная с индекса <paramref name="arrayIndex"/> до конца массива назначения <paramref name="array"/>.— или —Тип <paramref name="T"/> не может быть автоматически приведен к типу массива назначения <paramref name="array"/>.</exception>
        </member>
        <member name="M:Bars.B4.Utils.ObservableList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Копирует элементы коллекции <see cref="T:System.Collections.ICollection"/> в массив <see cref="T:System.Array"/>, начиная с указанного индекса массива <see cref="T:System.Array"/>.
            </summary>
            <param name="array">Одномерный массив <see cref="T:System.Array"/>, в который копируются элементы из интерфейса <see cref="T:System.Collections.ICollection"/>.Индексация в массиве <see cref="T:System.Array"/> должна начинаться с нуля.</param><param name="index">Отсчитываемый от нуля индекс в массиве <paramref name="array"/>, с которого начинается копирование. </param><exception cref="T:System.ArgumentNullException">Параметр <paramref name="array"/> имеет значение null. </exception><exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="index"/> меньше нуля. </exception><exception cref="T:System.ArgumentException">Параметр <paramref name="array"/> является многомерным–либо– Количество элементов в исходной коллекции <see cref="T:System.Collections.ICollection"/> превышает доступное место, начиная с индекса <paramref name="index"/> до конца массива назначения <paramref name="array"/>. </exception><exception cref="T:System.ArgumentException">Тип исходной коллекции <see cref="T:System.Collections.ICollection"/> нельзя автоматически привести к типу массива назначения <paramref name="array"/>. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="E:Bars.B4.Utils.ObservableList`1.OnChange">
            <summary>
            Событие ассоциированное с добавлением/удалением элементов.
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.ObservableList`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Получает объект, который может использоваться для синхронизации доступа к объекту <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <returns>
            Объект, который может использоваться для синхронизации доступа к коллекции <see cref="T:System.Collections.ICollection"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Bars.B4.Utils.ObservableList`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Получает значение, позволяющее определить, является ли доступ к коллекции <see cref="T:System.Collections.ICollection"/> синхронизированным (потокобезопасным).
            </summary>
            <returns>
            true, если доступ к классу <see cref="T:System.Collections.ICollection"/> является синхронизированным (потокобезопасным); в противном случае — false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Bars.B4.Utils.ObservableList`1.System#Collections#IList#IsFixedSize">
            <summary>
            Получает значение, показывающее, имеет ли список <see cref="T:System.Collections.IList"/> фиксированный размер.
            </summary>
            <returns>
            Значение true, если коллекция <see cref="T:System.Collections.IList"/> имеет фиксированный размер, в противном случае — false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Bars.B4.Utils.ObservableList`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Получает или задает объект по указанному индексу.
            </summary>
            <returns>
            Элемент с указанным индексом.
            </returns>
            <param name="index">Индекс (с нуля) элемента, который требуется получить или задать. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> не является допустимым индексом в <see cref="T:System.Collections.IList"/>. </exception><exception cref="T:System.NotSupportedException">Свойство задано, и список <see cref="T:System.Collections.IList"/> доступен только для чтения. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="T:Bars.B4.Utils.QueryableExtention">
            <summary>
            Класс, содержащий методы расширения типа IQueryable.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.QueryableExtention.OrderIf``2(System.Linq.IQueryable{``0},System.Boolean,System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Условная сортировка последовательности.
            </summary>
            <param name="query">
            </param>
            <param name="condition">
            Проводить или нет сортировку. 
            </param>
            <param name="acs">
            Сортировать по возрастанию или убыванию. 
            </param>
            <param name="keySelector">
            Выражение для вычисления ключа. 
            </param>
            <typeparam name="T">
            Тип элементов последовательности.
            </typeparam>
            <typeparam name="TKey">
            Тип ключей.
            </typeparam>
            <returns>
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.QueryableExtention.OrderThenIf``2(System.Linq.IQueryable{``0},System.Boolean,System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Дополнительная условная сортировка последовательности.
            </summary>
            <param name="query">
            </param>
            <param name="condition">
            Проводить или нет сортировку. 
            </param>
            <param name="acs">
            Сортировать по возрастанию или убыванию. 
            </param>
            <param name="keySelector">
            Выражение для вычисления ключа. 
            </param>
            <typeparam name="T">
            Тип элементов последовательности.
            </typeparam>
            <typeparam name="TKey">
            Тип ключей.
            </typeparam>
            <returns>
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.QueryableExtention.WhereIf``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Условная фильтрация последовательности.
            </summary>
            <param name="query">
            </param>
            <param name="condition">
            Проводить или нет фильтрацию. 
            </param>
            <param name="predicate">
            Предикат для отбора элементов. 
            </param>
            <typeparam name="T">
            Тип элементов последовательности.
            </typeparam>
            <returns>
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.QueryableExtention.In``1(``0,``0[])">
            <summary>
            Принадлежит ли элемент массиву.
            Если элемент равен null, возвращается false.
            </summary>
            <param name="value"></param>
            <param name="values"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.QueryableExtention.In``1(``0,System.Linq.IQueryable{``0})">
            <summary>
            Принадлежит ли элемент последовательности.
            Если элемент равен null, возвращается false.
            </summary>
            <param name="value"></param>
            <param name="values"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.QueryableExtention.In``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Принадлежит ли элемент последовательности.
            Если элемент равен null, возвращается false.
            </summary>
            <param name="value"></param>
            <param name="values"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.QueryableExtention.NotIn``1(``0,``0[])">
            <summary>
            Проверяет не принадлежит ли элемент массиву.
            Если элемент или коллекция равны null, возвращается true.
            </summary>
            <param name="value"></param>
            <param name="values"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.QueryableExtention.NotIn``1(``0,System.Linq.IQueryable{``0})">
            <summary>
            Проверяет не принадлежит ли элемент последовательности.
            Если элемент или коллекция равны null, возвращается true.
            </summary>
            <param name="value"></param>
            <param name="values"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.QueryableExtention.NotIn``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Проверяет не принадлежит ли элемент последовательности.
            Если элемент или коллекция равны null, возвращается true.
            </summary>
            <param name="value"></param>
            <param name="values"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.QueryableExtention.Distinct``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Возвращает различающиеся элементы последовательности, используя для сравнения значений компаратор,
            получаемый из выражения.
            </summary>
            <param name="query">
            Последовательность.
            </param>
            <param name="memberExpression">
            Выражение, из которого с помощью метода Member класса FnEqualityComparer создается компаратор.
            </param>
            <typeparam name="T"></typeparam>
            <typeparam name="V"></typeparam>
            <returns></returns>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.QueryableExtention.Distinct``1(System.Linq.IQueryable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Возвращает различающиеся элементы последовательности, используя для сравнения значений компаратор,
            получаемый из делегата.
            </summary>
            <param name="query">
            Последовательность.
            </param>
            <param name="fn">
            Делегат, из которого с помощью метода Fn класса FnEqualityComparer создается компаратор.
            </param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.QueryableExtention.WhereIfContains``2(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>Значение свойства входит в список, ограничение накладывается если выполняется условие</summary>
            <typeparam name="T">Тип сущности</typeparam>
            <typeparam name="TProperty">Тип свойства</typeparam>
            <param name="query">Запрос</param>
            <param name="condition">Условие применимости ограничения</param>
            <param name="propertyExpression">Свойство</param>
            <param name="array">Массив</param>
            <param name="additionalExpression">Дополнительное условие отбора через или</param>
            <returns>Отфильтрованный запрос</returns>
        </member>
        <member name="M:Bars.B4.Utils.QueryableExtention.WhereContains``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>Значение свойства входит в список</summary>
            <typeparam name="T">Тип сущности</typeparam>
            <typeparam name="TProperty">Тип свойства</typeparam>
            <param name="query">Запрос</param>
            <param name="propertyExpression">Свойство</param>
            <param name="array">Массив</param>
            <param name="additionalExpression">Дополнительное условие отбора через или</param>
            <returns>Отфильтрованный запрос</returns>
        </member>
        <member name="M:Bars.B4.Utils.QueryableExtention.WhereNotContains``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{``1})">
            <summary>Значение свойства не входит в список</summary>
            <typeparam name="T">Тип сущности</typeparam>
            <typeparam name="TProperty">Тип свойства</typeparam>
            <param name="query">Запрос</param>
            <param name="propertyExpression">Свойство</param>
            <param name="array">Массив</param>
            <returns>Отфильтрованный запрос</returns>
        </member>
        <member name="T:Bars.B4.Utils.SolutionParser.ProjectItemType">
            <summary>
            Тип элемента проекта
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.SolutionParser.ProjectItemType.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.SolutionParser.ProjectItemType.Compile">
            <summary>
            
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.SolutionParser.ProjectItemType.Content">
            <summary>
            
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.SolutionParser.ProjectItemType.Reference">
            <summary>
            
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.SolutionParser.ProjectItemType.ProjectReference">
            <summary>
            
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.SolutionParser.ProjectItemType.EmbeddedResource">
            <summary>
            
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.SolutionParser.ProjectOuputType">
            <summary>
            Тип выходного файла проекта
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.SolutionParser.ProjectOuputType.Unknown">
            <summary>
            Неизвестно
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.SolutionParser.ProjectOuputType.Library">
            <summary>
            Библиотека классов
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.SolutionParser.ProjectOuputType.Exe">
            <summary>
            Исполняемый файл
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.SolutionParser.Solution">
            <summary>
            Описание решения
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.SolutionParser.SolutionItem">
            <summary>
            Описание решения
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.SolutionParser.SolutionItem.Name">
            <summary>
            Наименование проекта
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.SolutionParser.SolutionItem.AbsolutePath">
            <summary>
            Абсолютный путь файла проекта
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.SolutionParser.SolutionItem.Directory">
            <summary>
            Абсолютный путь каталога проекта
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.SolutionParser.Solution.Load(System.String)">
            <summary>
            Получение описания проектов из файла решения
            </summary>
            <param name="solutionFile">Абсолютный путь файла решения</param>
            <returns></returns>
        </member>
        <member name="P:Bars.B4.Utils.SolutionParser.Solution.Projects">
            <summary>
            Список проектов в решении
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.SolutionParser.SolutionProject">
            <summary>
            Описание проекта в решении
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.SolutionParser.SolutionProject.GetProjectItems(Bars.B4.Utils.SolutionParser.ProjectItemType)">
            <summary>
            Получить список элементов проекта
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bars.B4.Utils.SolutionParser.SolutionProject.GetEmbeddedResources">
            <summary>
            Получить список вшитых в сборку (embedded) ресурсов
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bars.B4.Utils.SolutionParser.SolutionProject.RelativePath">
            <summary>
            Относительный решения путь файла проекта
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.SolutionParser.SolutionProject.Guid">
            <summary>
            Идентификатор проекта
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.SolutionParser.SolutionProject.OutputType">
            <summary>
            Тип проекта
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.SolutionParser.SolutionProject.AssemblyName">
            <summary>
            Наименование сборки
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.SolutionParser.SolutionProject.RootNamespace">
            <summary>
            Корневое пространство имен
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.SolutionParser.SolutionProject.OutputFileName">
            <summary>
            Вероятное имя файла
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.SolutionParser.SolutionProject.ProjectReferences">
            <summary>
            Список проектов, на которые ссылается данный проект
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.SolutionParser.ProjectEmbeddedResource">
            <summary>
            Описание вшитого в сборку (embedded) ресурса
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.SolutionParser.ProjectEmbeddedResource.RelativePath">
            <summary>
            Относительный путь файла ресурса в каталоге проекта
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.SolutionParser.ProjectEmbeddedResource.AbsolutePath">
            <summary>
            Абсолютный путь файла ресурса
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.SolutionParser.ProjectEmbeddedResource.ResourceName">
            <summary>
            Наименование ресурса
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.Transliterator">
            <summary>
            Транслитератор.
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.Transliterator.Gost">
            <summary>
            Словарь для транслитераации по ГОСТ.
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.Transliterator.Iso">
            <summary>
            Словарь для транслитераации по ИСО.
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.Transliterator.SafeSql">
            <summary>
            Словарь для транслитераации по защищенному sql.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.Transliterator.#cctor">
            <summary>
            Инициализация словарей класса <see cref="T:Bars.B4.Utils.Transliterator"/>.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.Transliterator.LatToRus(System.String)">
            <summary>
            Преобразует латиницу в кириллицу, используя ИСО-транслитератор.
            </summary>
            <param name="текст">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.Transliterator.LatToRus(System.String,Bars.B4.Utils.TransliteratorType)">
            <summary>
            Преобразует латиницу в кириллицу, используя указанный транслитератор.
            </summary>
            <param name="текст">
            </param>
            <param name="тип">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.Transliterator.RusToLat(System.String)">
            <summary>
            Преобразует кириллицу в латиницу, используя ИСО-транслитератор.
            </summary>
            <param name="текст">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.Transliterator.RusToLat(System.String,Bars.B4.Utils.TransliteratorType)">
            <summary>
            Преобразует кириллицу в латиницу, используя указанный транслитератор.
            </summary>
            <param name="текст">
            </param>
            <param name="тип">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.Transliterator.ПолучитьСловарьСоответствия(Bars.B4.Utils.TransliteratorType)">
            <summary>
            Получить словарь соответствия.
            </summary>
            <param name="тип">
            Тип транслитератора.
            </param>
            <returns>
            </returns>
            <exception cref="T:System.InvalidOperationException">
            </exception>
        </member>
        <member name="T:Bars.B4.Utils.BubbleSortExtension">
            <summary>
            Класс, содержащий методы расширения, позволяющие добавить в коллекцию зависимые элементы.
            В платформе используется для модулей.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.BubbleSortExtension.TopoSort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Добавляет в коллекцию зависимые элементы.
            </summary>
            <param name="elements"></param>
            <param name="dependencies">
            Делегат, с помощью которого получаем зависимые элементы.
            </param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Bars.B4.Utils.BubbleSortExtension.seen_type">
            <summary>
            The seen_type.
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.BubbleSortExtension.seen_type.seeing">
            <summary>
              The seeing.
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.BubbleSortExtension.seen_type.seen">
            <summary>
              The seen.
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.BubbleSortExtension.seen_type.error">
            <summary>
              The error.
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.ICachedValue">
            <summary>
            Интерфейс кешированого значения.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.ICachedValue.Refresh">
            <summary>
            Обновить кэш.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.ICachedValue.MarkExpired">
            <summary>
            Пометить текущий кэш как просроченный.
            При следующем запросе значение будет обновлено.
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.ICachedValue.Value">
            <summary>
            Возвращает текущее кэшированное значение. Если значение является устаревшим, то кэш обновляется.
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.ICachedValue`1">
            <summary>
            Обобщенный интерфейс кешированого значения.
            </summary>
            <typeparam name="T">
            </typeparam>
        </member>
        <member name="M:Bars.B4.Utils.ICachedValue`1.Refresh">
            <summary>
            Обновить кэш.
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.ICachedValue`1.Value">
            <summary>
            Возвращает текущее кэшированное значение. Если значение является устаревшим, то кэш обновляется.
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.CachedValue`1">
            <summary>
            Потокобезопасная реализация ICachedValue.
            Наследники этого класса должны реализовать метод GetValue.
            </summary>
            <typeparam name="T">
            Type 
            </typeparam>
        </member>
        <member name="F:Bars.B4.Utils.CachedValue`1.lockValue">
            <summary>
            Маркер блокировки.
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.CachedValue`1.timeout">
            <summary>
            Тайм-аут.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.CachedValue`1.Refresh">
            <summary>
             Обновить кэш.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.CachedValue`1.Refresh(System.Boolean)">
            <summary>
             Обновить кэш.
            </summary>
            <param name="checkTime">
            флаг проверки времени. 
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.CachedValue`1.MarkExpired">
            <summary>
            Пометить текущий кэш как просроченный.
            При следующем запросе значение будет обновлено.
            </summary>
        </member>
        <member name="M:Bars.B4.Utils.CachedValue`1.GetTimeout">
            <summary>
            Получить длительность кэширования в секундах.
            </summary>
            <returns>
            Длительность в секундах.
            </returns>
        </member>
        <member name="M:Bars.B4.Utils.CachedValue`1.GetValue(`0@,System.DateTime@)">
            <summary>
            Получает значение и его время истечения.
            Вызывается когда необходимо получить свежее значение для кэша.
            Вызывать только одним потоком.
            </summary>
            <param name="result">
            Выходной параметр для текущего значения.
            </param>
            <param name="expireAt">
            Выходной параметр для даты, когда значение устаревает/истекает.
            </param>
        </member>
        <member name="P:Bars.B4.Utils.CachedValue`1.DefaultTimeout">
            <summary>
            Длительность кэширования по умолчанию, сек.
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.CachedValue`1.Timeout">
            <summary>
            Время кэширования полученное из настроек, сек.
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.CachedValue`1.Value">
            <summary>
            Возвращает значение.
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.CachedValue`1.CachedValueSnapshot.ExpireTime">
            <summary>
            Дата истечения.
            </summary>
        </member>
        <member name="P:Bars.B4.Utils.CachedValue`1.CachedValueSnapshot.Value">
            <summary>
            Текущее значение.
            </summary>
        </member>
        <member name="T:Bars.B4.Utils.TransliteratorType">
            <summary>
            Типы транслитераторов.
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.TransliteratorType.ГОСТ">
            <summary>
            ГОСТ 16876-71.
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.TransliteratorType.ИСО">
            <summary>
            ИСО 9-95.
            </summary>
        </member>
        <member name="F:Bars.B4.Utils.TransliteratorType.ЗащищенныйSQL">
            <summary>
            Защищенный sql.
            </summary>
        </member>
    </members>
</doc>
